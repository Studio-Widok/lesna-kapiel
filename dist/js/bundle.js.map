{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/cash-dom/dist/cash.js","src/js/atrakcje.js","src/js/fixed-link.js","src/js/main.js","src/js/nav.js","src/js/widok-hoverable.js","src/js/widok-scrollItem.js","src/js/widok-slider.js","src/js/widok-throttle.js","src/js/widok.js"],"names":[],"mappingsl0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"../../","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/cash-dom/dist/cash.js","src/js/atrakcje.js","src/js/fixed-link.js","src/js/main.js","src/js/nav.js","src/js/widok-hoverable.js","src/js/widok-scrollItem.js","src/js/widok-slider.js","src/js/widok-throttle.js","src/js/widok.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACl0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* MIT https://github.com/fabiospampinato/cash */\n(function(){\n\"use strict\";\n\nvar propMap = {\n  /* GENERAL */\n  \"class\": 'className',\n  contenteditable: 'contentEditable',\n\n  /* LABEL */\n  \"for\": 'htmlFor',\n\n  /* INPUT */\n  readonly: 'readOnly',\n  maxlength: 'maxLength',\n  tabindex: 'tabIndex',\n\n  /* TABLE */\n  colspan: 'colSpan',\n  rowspan: 'rowSpan',\n\n  /* IMAGE */\n  usemap: 'useMap'\n};\n\nfunction attempt(fn, arg) {\n  try {\n    return fn(arg);\n  } catch (_a) {\n    return arg;\n  }\n}\n\nvar doc = document,\n    win = window,\n    docEle = doc.documentElement,\n    createElement = doc.createElement.bind(doc),\n    div = createElement('div'),\n    table = createElement('table'),\n    tbody = createElement('tbody'),\n    tr = createElement('tr'),\n    isArray = Array.isArray,\n    ArrayPrototype = Array.prototype,\n    concat = ArrayPrototype.concat,\n    filter = ArrayPrototype.filter,\n    indexOf = ArrayPrototype.indexOf,\n    map = ArrayPrototype.map,\n    push = ArrayPrototype.push,\n    slice = ArrayPrototype.slice,\n    some = ArrayPrototype.some,\n    splice = ArrayPrototype.splice;\nvar idRe = /^#(?:[\\w-]|\\\\.|[^\\x00-\\xa0])*$/,\n    classRe = /^\\.(?:[\\w-]|\\\\.|[^\\x00-\\xa0])*$/,\n    htmlRe = /<.+>/,\n    tagRe = /^\\w+$/; // @require ./variables.ts\n\nfunction find(selector, context) {\n  return !selector || !isDocument(context) && !isElement(context) ? [] : classRe.test(selector) ? context.getElementsByClassName(selector.slice(1)) : tagRe.test(selector) ? context.getElementsByTagName(selector) : context.querySelectorAll(selector);\n} // @require ./find.ts\n// @require ./variables.ts\n\n\nvar Cash =\n/** @class */\nfunction () {\n  function Cash(selector, context) {\n    if (!selector) return;\n    if (isCash(selector)) return selector;\n    var eles = selector;\n\n    if (isString(selector)) {\n      var ctx = (isCash(context) ? context[0] : context) || doc;\n      eles = idRe.test(selector) ? ctx.getElementById(selector.slice(1)) : htmlRe.test(selector) ? parseHTML(selector) : find(selector, ctx);\n      if (!eles) return;\n    } else if (isFunction(selector)) {\n      return this.ready(selector); //FIXME: `fn.ready` is not included in `core`, but it's actually a core functionality\n    }\n\n    if (eles.nodeType || eles === win) eles = [eles];\n    this.length = eles.length;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      this[i] = eles[i];\n    }\n  }\n\n  Cash.prototype.init = function (selector, context) {\n    return new Cash(selector, context);\n  };\n\n  return Cash;\n}();\n\nvar fn = Cash.prototype,\n    cash = fn.init;\ncash.fn = cash.prototype = fn; // Ensuring that `cash () instanceof cash`\n\nfn.length = 0;\nfn.splice = splice; // Ensuring a cash collection gets printed as array-like in Chrome's devtools\n\nif (typeof Symbol === 'function') {\n  // Ensuring a cash collection is iterable\n  fn[Symbol['iterator']] = ArrayPrototype[Symbol['iterator']];\n}\n\nfn.map = function (callback) {\n  return cash(concat.apply([], map.call(this, function (ele, i) {\n    return callback.call(ele, i, ele);\n  })));\n};\n\nfn.slice = function (start, end) {\n  return cash(slice.call(this, start, end));\n}; // @require ./cash.ts\n\n\nvar dashAlphaRe = /-([a-z])/g;\n\nfunction camelCase(str) {\n  return str.replace(dashAlphaRe, function (match, letter) {\n    return letter.toUpperCase();\n  });\n}\n\nfunction each(arr, callback, _reverse) {\n  if (_reverse) {\n    var i = arr.length;\n\n    while (i--) {\n      if (callback.call(arr[i], i, arr[i]) === false) return arr;\n    }\n  } else {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (callback.call(arr[i], i, arr[i]) === false) return arr;\n    }\n  }\n\n  return arr;\n}\n\ncash.each = each;\n\nfn.each = function (callback) {\n  return each(this, callback);\n};\n\nfn.removeProp = function (prop) {\n  return this.each(function (i, ele) {\n    delete ele[propMap[prop] || prop];\n  });\n};\n\nfunction extend(target) {\n  var objs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    objs[_i - 1] = arguments[_i];\n  }\n\n  var length = arguments.length;\n  if (!length) return {};\n  if (length === 1) return extend(cash, target);\n\n  for (var i = 1; i < length; i++) {\n    for (var key in arguments[i]) {\n      target[key] = arguments[i][key];\n    }\n  }\n\n  return target;\n}\n\ncash.extend = extend;\n\nfn.extend = function (plugins) {\n  return extend(fn, plugins);\n};\n\ncash.guid = 1; // @require ./cash.ts\n\nfunction matches(ele, selector) {\n  var matches = ele && (ele['matches'] || ele['webkitMatchesSelector'] || ele['msMatchesSelector']);\n  return !!matches && !!selector && matches.call(ele, selector);\n}\n\nfunction isCash(x) {\n  return x instanceof Cash;\n}\n\nfunction isWindow(x) {\n  return !!x && x === x.window;\n}\n\nfunction isDocument(x) {\n  return !!x && x.nodeType === 9;\n}\n\nfunction isElement(x) {\n  return !!x && x.nodeType === 1;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nfunction isString(x) {\n  return typeof x === 'string';\n}\n\nfunction isUndefined(x) {\n  return x === undefined;\n}\n\nfunction isNull(x) {\n  return x === null;\n}\n\nfunction isNumeric(x) {\n  return !isNaN(parseFloat(x)) && isFinite(x);\n}\n\ncash.isWindow = isWindow;\ncash.isFunction = isFunction;\ncash.isNumeric = isNumeric;\ncash.isArray = isArray;\n\nfn.prop = function (prop, value) {\n  if (!prop) return;\n\n  if (isString(prop)) {\n    prop = propMap[prop] || prop;\n    if (arguments.length < 2) return this[0] && this[0][prop];\n    return this.each(function (i, ele) {\n      ele[prop] = value;\n    });\n  }\n\n  for (var key in prop) {\n    this.prop(key, prop[key]);\n  }\n\n  return this;\n};\n\nfn.get = function (index) {\n  if (isUndefined(index)) return slice.call(this);\n  index = Number(index);\n  return this[index < 0 ? index + this.length : index];\n};\n\nfn.eq = function (index) {\n  return cash(this.get(index));\n};\n\nfn.first = function () {\n  return this.eq(0);\n};\n\nfn.last = function () {\n  return this.eq(-1);\n}; // @require ./matches.ts\n// @require ./type_checking.ts\n\n\nfunction getCompareFunction(comparator) {\n  return isString(comparator) ? function (i, ele) {\n    return matches(ele, comparator);\n  } : isFunction(comparator) ? comparator : isCash(comparator) ? function (i, ele) {\n    return comparator.is(ele);\n  } : !comparator ? function () {\n    return false;\n  } : function (i, ele) {\n    return ele === comparator;\n  };\n}\n\nfn.filter = function (comparator) {\n  var compare = getCompareFunction(comparator);\n  return cash(filter.call(this, function (ele, i) {\n    return compare.call(ele, i, ele);\n  }));\n}; // @require collection/filter.ts\n\n\nfunction filtered(collection, comparator) {\n  return !comparator ? collection : collection.filter(comparator);\n} // @require ./type_checking.ts\n\n\nvar splitValuesRe = /\\S+/g;\n\nfunction getSplitValues(str) {\n  return isString(str) ? str.match(splitValuesRe) || [] : [];\n}\n\nfn.hasClass = function (cls) {\n  return !!cls && some.call(this, function (ele) {\n    return isElement(ele) && ele.classList.contains(cls);\n  });\n};\n\nfn.removeAttr = function (attr) {\n  var attrs = getSplitValues(attr);\n  return this.each(function (i, ele) {\n    if (!isElement(ele)) return;\n    each(attrs, function (i, a) {\n      ele.removeAttribute(a);\n    });\n  });\n};\n\nfunction attr(attr, value) {\n  if (!attr) return;\n\n  if (isString(attr)) {\n    if (arguments.length < 2) {\n      if (!this[0] || !isElement(this[0])) return;\n      var value_1 = this[0].getAttribute(attr);\n      return isNull(value_1) ? undefined : value_1;\n    }\n\n    if (isUndefined(value)) return this;\n    if (isNull(value)) return this.removeAttr(attr);\n    return this.each(function (i, ele) {\n      if (!isElement(ele)) return;\n      ele.setAttribute(attr, value);\n    });\n  }\n\n  for (var key in attr) {\n    this.attr(key, attr[key]);\n  }\n\n  return this;\n}\n\nfn.attr = attr;\n\nfn.toggleClass = function (cls, force) {\n  var classes = getSplitValues(cls),\n      isForce = !isUndefined(force);\n  return this.each(function (i, ele) {\n    if (!isElement(ele)) return;\n    each(classes, function (i, c) {\n      if (isForce) {\n        force ? ele.classList.add(c) : ele.classList.remove(c);\n      } else {\n        ele.classList.toggle(c);\n      }\n    });\n  });\n};\n\nfn.addClass = function (cls) {\n  return this.toggleClass(cls, true);\n};\n\nfn.removeClass = function (cls) {\n  if (arguments.length) return this.toggleClass(cls, false);\n  return this.attr('class', '');\n};\n\nfunction pluck(arr, prop, deep, until) {\n  var plucked = [],\n      isCallback = isFunction(prop),\n      compare = until && getCompareFunction(until);\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    if (isCallback) {\n      var val_1 = prop(arr[i]);\n      if (val_1.length) push.apply(plucked, val_1);\n    } else {\n      var val_2 = arr[i][prop];\n\n      while (val_2 != null) {\n        if (until && compare(-1, val_2)) break;\n        plucked.push(val_2);\n        val_2 = deep ? val_2[prop] : null;\n      }\n    }\n  }\n\n  return plucked;\n}\n\nfunction unique(arr) {\n  return arr.length > 1 ? filter.call(arr, function (item, index, self) {\n    return indexOf.call(self, item) === index;\n  }) : arr;\n}\n\ncash.unique = unique;\n\nfn.add = function (selector, context) {\n  return cash(unique(this.get().concat(cash(selector, context).get())));\n}; // @require core/type_checking.ts\n// @require core/variables.ts\n\n\nfunction computeStyle(ele, prop, isVariable) {\n  if (!isElement(ele)) return;\n  var style = win.getComputedStyle(ele, null);\n  return isVariable ? style.getPropertyValue(prop) || undefined : style[prop] || ele.style[prop];\n} // @require ./compute_style.ts\n\n\nfunction computeStyleInt(ele, prop) {\n  return parseInt(computeStyle(ele, prop), 10) || 0;\n}\n\nvar cssVariableRe = /^--/; // @require ./variables.ts\n\nfunction isCSSVariable(prop) {\n  return cssVariableRe.test(prop);\n} // @require core/camel_case.ts\n// @require core/cash.ts\n// @require core/each.ts\n// @require core/variables.ts\n// @require ./is_css_variable.ts\n\n\nvar prefixedProps = {},\n    style = div.style,\n    vendorsPrefixes = ['webkit', 'moz', 'ms'];\n\nfunction getPrefixedProp(prop, isVariable) {\n  if (isVariable === void 0) {\n    isVariable = isCSSVariable(prop);\n  }\n\n  if (isVariable) return prop;\n\n  if (!prefixedProps[prop]) {\n    var propCC = camelCase(prop),\n        propUC = \"\" + propCC[0].toUpperCase() + propCC.slice(1),\n        props = (propCC + \" \" + vendorsPrefixes.join(propUC + \" \") + propUC).split(' ');\n    each(props, function (i, p) {\n      if (p in style) {\n        prefixedProps[prop] = p;\n        return false;\n      }\n    });\n  }\n\n  return prefixedProps[prop];\n}\n\n; // @require core/type_checking.ts\n// @require ./is_css_variable.ts\n\nvar numericProps = {\n  animationIterationCount: true,\n  columnCount: true,\n  flexGrow: true,\n  flexShrink: true,\n  fontWeight: true,\n  gridArea: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnStart: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowStart: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  widows: true,\n  zIndex: true\n};\n\nfunction getSuffixedValue(prop, value, isVariable) {\n  if (isVariable === void 0) {\n    isVariable = isCSSVariable(prop);\n  }\n\n  return !isVariable && !numericProps[prop] && isNumeric(value) ? value + \"px\" : value;\n}\n\nfunction css(prop, value) {\n  if (isString(prop)) {\n    var isVariable_1 = isCSSVariable(prop);\n    prop = getPrefixedProp(prop, isVariable_1);\n    if (arguments.length < 2) return this[0] && computeStyle(this[0], prop, isVariable_1);\n    if (!prop) return this;\n    value = getSuffixedValue(prop, value, isVariable_1);\n    return this.each(function (i, ele) {\n      if (!isElement(ele)) return;\n\n      if (isVariable_1) {\n        ele.style.setProperty(prop, value);\n      } else {\n        ele.style[prop] = value;\n      }\n    });\n  }\n\n  for (var key in prop) {\n    this.css(key, prop[key]);\n  }\n\n  return this;\n}\n\n;\nfn.css = css; // @optional ./css.ts\n// @require core/attempt.ts\n// @require core/camel_case.ts\n\nvar JSONStringRe = /^\\s+|\\s+$/;\n\nfunction getData(ele, key) {\n  var value = ele.dataset[key] || ele.dataset[camelCase(key)];\n  if (JSONStringRe.test(value)) return value;\n  return attempt(JSON.parse, value);\n} // @require core/attempt.ts\n// @require core/camel_case.ts\n\n\nfunction setData(ele, key, value) {\n  value = attempt(JSON.stringify, value);\n  ele.dataset[camelCase(key)] = value;\n}\n\nfunction data(name, value) {\n  if (!name) {\n    if (!this[0]) return;\n    var datas = {};\n\n    for (var key in this[0].dataset) {\n      datas[key] = getData(this[0], key);\n    }\n\n    return datas;\n  }\n\n  if (isString(name)) {\n    if (arguments.length < 2) return this[0] && getData(this[0], name);\n    if (isUndefined(value)) return this;\n    return this.each(function (i, ele) {\n      setData(ele, name, value);\n    });\n  }\n\n  for (var key in name) {\n    this.data(key, name[key]);\n  }\n\n  return this;\n}\n\nfn.data = data; // @optional ./data.ts\n\nfunction getDocumentDimension(doc, dimension) {\n  var docEle = doc.documentElement;\n  return Math.max(doc.body[\"scroll\" + dimension], docEle[\"scroll\" + dimension], doc.body[\"offset\" + dimension], docEle[\"offset\" + dimension], docEle[\"client\" + dimension]);\n} // @require css/helpers/compute_style_int.ts\n\n\nfunction getExtraSpace(ele, xAxis) {\n  return computeStyleInt(ele, \"border\" + (xAxis ? 'Left' : 'Top') + \"Width\") + computeStyleInt(ele, \"padding\" + (xAxis ? 'Left' : 'Top')) + computeStyleInt(ele, \"padding\" + (xAxis ? 'Right' : 'Bottom')) + computeStyleInt(ele, \"border\" + (xAxis ? 'Right' : 'Bottom') + \"Width\");\n}\n\neach([true, false], function (i, outer) {\n  each(['Width', 'Height'], function (i, prop) {\n    var name = \"\" + (outer ? 'outer' : 'inner') + prop;\n\n    fn[name] = function (includeMargins) {\n      if (!this[0]) return;\n      if (isWindow(this[0])) return outer ? this[0][\"inner\" + prop] : this[0].document.documentElement[\"client\" + prop];\n      if (isDocument(this[0])) return getDocumentDimension(this[0], prop);\n      return this[0][\"\" + (outer ? 'offset' : 'client') + prop] + (includeMargins && outer ? computeStyleInt(this[0], \"margin\" + (i ? 'Top' : 'Left')) + computeStyleInt(this[0], \"margin\" + (i ? 'Bottom' : 'Right')) : 0);\n    };\n  });\n});\neach(['Width', 'Height'], function (index, prop) {\n  var propLC = prop.toLowerCase();\n\n  fn[propLC] = function (value) {\n    if (!this[0]) return isUndefined(value) ? undefined : this;\n\n    if (!arguments.length) {\n      if (isWindow(this[0])) return this[0].document.documentElement[\"client\" + prop];\n      if (isDocument(this[0])) return getDocumentDimension(this[0], prop);\n      return this[0].getBoundingClientRect()[propLC] - getExtraSpace(this[0], !index);\n    }\n\n    var valueNumber = parseInt(value, 10);\n    return this.each(function (i, ele) {\n      if (!isElement(ele)) return;\n      var boxSizing = computeStyle(ele, 'boxSizing');\n      ele.style[propLC] = getSuffixedValue(propLC, valueNumber + (boxSizing === 'border-box' ? getExtraSpace(ele, !index) : 0));\n    });\n  };\n}); // @optional ./inner_outer.ts\n// @optional ./normal.ts\n// @require css/helpers/compute_style.ts\n\nvar defaultDisplay = {};\n\nfunction getDefaultDisplay(tagName) {\n  if (defaultDisplay[tagName]) return defaultDisplay[tagName];\n  var ele = createElement(tagName);\n  doc.body.insertBefore(ele, null);\n  var display = computeStyle(ele, 'display');\n  doc.body.removeChild(ele);\n  return defaultDisplay[tagName] = display !== 'none' ? display : 'block';\n} // @require css/helpers/compute_style.ts\n\n\nfunction isHidden(ele) {\n  return computeStyle(ele, 'display') === 'none';\n}\n\nvar displayProperty = '___cd';\n\nfn.toggle = function (force) {\n  return this.each(function (i, ele) {\n    if (!isElement(ele)) return;\n    var show = isUndefined(force) ? isHidden(ele) : force;\n\n    if (show) {\n      ele.style.display = ele[displayProperty] || '';\n\n      if (isHidden(ele)) {\n        ele.style.display = getDefaultDisplay(ele.tagName);\n      }\n    } else {\n      ele[displayProperty] = computeStyle(ele, 'display');\n      ele.style.display = 'none';\n    }\n  });\n};\n\nfn.hide = function () {\n  return this.toggle(false);\n};\n\nfn.show = function () {\n  return this.toggle(true);\n}; // @optional ./hide.ts\n// @optional ./show.ts\n// @optional ./toggle.ts\n\n\nfunction hasNamespaces(ns1, ns2) {\n  return !ns2 || !some.call(ns2, function (ns) {\n    return ns1.indexOf(ns) < 0;\n  });\n}\n\nvar eventsNamespace = '___ce',\n    eventsNamespacesSeparator = '.',\n    eventsFocus = {\n  focus: 'focusin',\n  blur: 'focusout'\n},\n    eventsHover = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n},\n    eventsMouseRe = /^(mouse|pointer|contextmenu|drag|drop|click|dblclick)/i; // @require ./variables.ts\n\nfunction getEventNameBubbling(name) {\n  return eventsHover[name] || eventsFocus[name] || name;\n} // @require ./variables.ts\n\n\nfunction getEventsCache(ele) {\n  return ele[eventsNamespace] = ele[eventsNamespace] || {};\n} // @require core/guid.ts\n// @require events/helpers/get_events_cache.ts\n\n\nfunction addEvent(ele, name, namespaces, selector, callback) {\n  var eventCache = getEventsCache(ele);\n  eventCache[name] = eventCache[name] || [];\n  eventCache[name].push([namespaces, selector, callback]);\n  ele.addEventListener(name, callback);\n} // @require ./variables.ts\n\n\nfunction parseEventName(eventName) {\n  var parts = eventName.split(eventsNamespacesSeparator);\n  return [parts[0], parts.slice(1).sort()]; // [name, namespace[]]\n} // @require ./get_events_cache.ts\n// @require ./has_namespaces.ts\n// @require ./parse_event_name.ts\n\n\nfunction removeEvent(ele, name, namespaces, selector, callback) {\n  var cache = getEventsCache(ele);\n\n  if (!name) {\n    for (name in cache) {\n      removeEvent(ele, name, namespaces, selector, callback);\n    }\n  } else if (cache[name]) {\n    cache[name] = cache[name].filter(function (_a) {\n      var ns = _a[0],\n          sel = _a[1],\n          cb = _a[2];\n      if (callback && cb.guid !== callback.guid || !hasNamespaces(ns, namespaces) || selector && selector !== sel) return true;\n      ele.removeEventListener(name, cb);\n    });\n  }\n}\n\nfn.off = function (eventFullName, selector, callback) {\n  var _this = this;\n\n  if (isUndefined(eventFullName)) {\n    this.each(function (i, ele) {\n      if (!isElement(ele) && !isDocument(ele) && !isWindow(ele)) return;\n      removeEvent(ele);\n    });\n  } else if (!isString(eventFullName)) {\n    for (var key in eventFullName) {\n      this.off(key, eventFullName[key]);\n    }\n  } else {\n    if (isFunction(selector)) {\n      callback = selector;\n      selector = '';\n    }\n\n    each(getSplitValues(eventFullName), function (i, eventFullName) {\n      var _a = parseEventName(eventFullName),\n          nameOriginal = _a[0],\n          namespaces = _a[1],\n          name = getEventNameBubbling(nameOriginal);\n\n      _this.each(function (i, ele) {\n        if (!isElement(ele) && !isDocument(ele) && !isWindow(ele)) return;\n        removeEvent(ele, name, namespaces, selector, callback);\n      });\n    });\n  }\n\n  return this;\n};\n\nfunction on(eventFullName, selector, data, callback, _one) {\n  var _this = this;\n\n  if (!isString(eventFullName)) {\n    for (var key in eventFullName) {\n      this.on(key, selector, data, eventFullName[key], _one);\n    }\n\n    return this;\n  }\n\n  if (!isString(selector)) {\n    if (isUndefined(selector) || isNull(selector)) {\n      selector = '';\n    } else if (isUndefined(data)) {\n      data = selector;\n      selector = '';\n    } else {\n      callback = data;\n      data = selector;\n      selector = '';\n    }\n  }\n\n  if (!isFunction(callback)) {\n    callback = data;\n    data = undefined;\n  }\n\n  if (!callback) return this;\n  each(getSplitValues(eventFullName), function (i, eventFullName) {\n    var _a = parseEventName(eventFullName),\n        nameOriginal = _a[0],\n        namespaces = _a[1],\n        name = getEventNameBubbling(nameOriginal),\n        isEventHover = nameOriginal in eventsHover,\n        isEventFocus = nameOriginal in eventsFocus;\n\n    if (!name) return;\n\n    _this.each(function (i, ele) {\n      if (!isElement(ele) && !isDocument(ele) && !isWindow(ele)) return;\n\n      var finalCallback = function finalCallback(event) {\n        if (event.target[\"___i\" + event.type]) return event.stopImmediatePropagation(); // Ignoring native event in favor of the upcoming custom one\n\n        if (event.namespace && !hasNamespaces(namespaces, event.namespace.split(eventsNamespacesSeparator))) return;\n        if (!selector && (isEventFocus && (event.target !== ele || event.___ot === name) || isEventHover && event.relatedTarget && ele.contains(event.relatedTarget))) return;\n        var thisArg = ele;\n\n        if (selector) {\n          var target = event.target;\n\n          while (!matches(target, selector)) {\n            if (target === ele) return;\n            target = target.parentNode;\n            if (!target) return;\n          }\n\n          thisArg = target;\n          event.___cd = true; // Delegate\n        }\n\n        if (event.___cd) {\n          Object.defineProperty(event, 'currentTarget', {\n            configurable: true,\n            get: function get() {\n              return thisArg;\n            }\n          });\n        }\n\n        Object.defineProperty(event, 'data', {\n          configurable: true,\n          get: function get() {\n            return data;\n          }\n        });\n        var returnValue = callback.call(thisArg, event, event.___td);\n\n        if (_one) {\n          removeEvent(ele, name, namespaces, selector, finalCallback);\n        }\n\n        if (returnValue === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      };\n\n      finalCallback.guid = callback.guid = callback.guid || cash.guid++;\n      addEvent(ele, name, namespaces, selector, finalCallback);\n    });\n  });\n  return this;\n}\n\nfn.on = on;\n\nfunction one(eventFullName, selector, data, callback) {\n  return this.on(eventFullName, selector, data, callback, true);\n}\n\n;\nfn.one = one;\n\nfn.ready = function (callback) {\n  var cb = function cb() {\n    return setTimeout(callback, 0, cash);\n  };\n\n  if (doc.readyState !== 'loading') {\n    cb();\n  } else {\n    doc.addEventListener('DOMContentLoaded', cb);\n  }\n\n  return this;\n};\n\nfn.trigger = function (event, data) {\n  if (isString(event)) {\n    var _a = parseEventName(event),\n        nameOriginal = _a[0],\n        namespaces = _a[1],\n        name_1 = getEventNameBubbling(nameOriginal);\n\n    if (!name_1) return this;\n    var type = eventsMouseRe.test(name_1) ? 'MouseEvents' : 'HTMLEvents';\n    event = doc.createEvent(type);\n    event.initEvent(name_1, true, true);\n    event.namespace = namespaces.join(eventsNamespacesSeparator);\n    event.___ot = nameOriginal;\n  }\n\n  event.___td = data;\n  var isEventFocus = event.___ot in eventsFocus;\n  return this.each(function (i, ele) {\n    if (isEventFocus && isFunction(ele[event.___ot])) {\n      ele[\"___i\" + event.type] = true; // Ensuring the native event is ignored\n\n      ele[event.___ot]();\n\n      ele[\"___i\" + event.type] = false; // Ensuring the custom event is not ignored\n    }\n\n    ele.dispatchEvent(event);\n  });\n}; // @optional ./off.ts\n// @optional ./on.ts\n// @optional ./one.ts\n// @optional ./ready.ts\n// @optional ./trigger.ts\n// @require core/pluck.ts\n// @require core/variables.ts\n\n\nfunction getValue(ele) {\n  if (ele.multiple && ele.options) return pluck(filter.call(ele.options, function (option) {\n    return option.selected && !option.disabled && !option.parentNode.disabled;\n  }), 'value');\n  return ele.value || '';\n}\n\nvar queryEncodeSpaceRe = /%20/g,\n    queryEncodeCRLFRe = /\\r?\\n/g;\n\nfunction queryEncode(prop, value) {\n  return \"&\" + encodeURIComponent(prop) + \"=\" + encodeURIComponent(value.replace(queryEncodeCRLFRe, '\\r\\n')).replace(queryEncodeSpaceRe, '+');\n}\n\nvar skippableRe = /file|reset|submit|button|image/i,\n    checkableRe = /radio|checkbox/i;\n\nfn.serialize = function () {\n  var query = '';\n  this.each(function (i, ele) {\n    each(ele.elements || [ele], function (i, ele) {\n      if (ele.disabled || !ele.name || ele.tagName === 'FIELDSET' || skippableRe.test(ele.type) || checkableRe.test(ele.type) && !ele.checked) return;\n      var value = getValue(ele);\n\n      if (!isUndefined(value)) {\n        var values = isArray(value) ? value : [value];\n        each(values, function (i, value) {\n          query += queryEncode(ele.name, value);\n        });\n      }\n    });\n  });\n  return query.slice(1);\n};\n\nfunction val(value) {\n  if (!arguments.length) return this[0] && getValue(this[0]);\n  return this.each(function (i, ele) {\n    var isSelect = ele.multiple && ele.options;\n\n    if (isSelect || checkableRe.test(ele.type)) {\n      var eleValue_1 = isArray(value) ? map.call(value, String) : isNull(value) ? [] : [String(value)];\n\n      if (isSelect) {\n        each(ele.options, function (i, option) {\n          option.selected = eleValue_1.indexOf(option.value) >= 0;\n        }, true);\n      } else {\n        ele.checked = eleValue_1.indexOf(ele.value) >= 0;\n      }\n    } else {\n      ele.value = isUndefined(value) || isNull(value) ? '' : value;\n    }\n  });\n}\n\nfn.val = val;\n\nfn.clone = function () {\n  return this.map(function (i, ele) {\n    return ele.cloneNode(true);\n  });\n};\n\nfn.detach = function (comparator) {\n  filtered(this, comparator).each(function (i, ele) {\n    if (ele.parentNode) {\n      ele.parentNode.removeChild(ele);\n    }\n  });\n  return this;\n};\n\nvar fragmentRe = /^\\s*<(\\w+)[^>]*>/,\n    singleTagRe = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/;\nvar containers = {\n  '*': div,\n  tr: tbody,\n  td: tr,\n  th: tr,\n  thead: table,\n  tbody: table,\n  tfoot: table\n}; //TODO: Create elements inside a document fragment, in order to prevent inline event handlers from firing\n//TODO: Ensure the created elements have the fragment as their parent instead of null, this also ensures we can deal with detatched nodes more reliably\n\nfunction parseHTML(html) {\n  if (!isString(html)) return [];\n  if (singleTagRe.test(html)) return [createElement(RegExp.$1)];\n  var fragment = fragmentRe.test(html) && RegExp.$1,\n      container = containers[fragment] || containers['*'];\n  container.innerHTML = html;\n  return cash(container.childNodes).detach().get();\n}\n\ncash.parseHTML = parseHTML;\n\nfn.empty = function () {\n  return this.each(function (i, ele) {\n    while (ele.firstChild) {\n      ele.removeChild(ele.firstChild);\n    }\n  });\n};\n\nfunction html(html) {\n  if (!arguments.length) return this[0] && this[0].innerHTML;\n  if (isUndefined(html)) return this;\n  return this.each(function (i, ele) {\n    if (!isElement(ele)) return;\n    ele.innerHTML = html;\n  });\n}\n\nfn.html = html;\n\nfn.remove = function (comparator) {\n  filtered(this, comparator).detach().off();\n  return this;\n};\n\nfunction text(text) {\n  if (isUndefined(text)) return this[0] ? this[0].textContent : '';\n  return this.each(function (i, ele) {\n    if (!isElement(ele)) return;\n    ele.textContent = text;\n  });\n}\n\n;\nfn.text = text;\n\nfn.unwrap = function () {\n  this.parent().each(function (i, ele) {\n    if (ele.tagName === 'BODY') return;\n    var $ele = cash(ele);\n    $ele.replaceWith($ele.children());\n  });\n  return this;\n};\n\nfn.offset = function () {\n  var ele = this[0];\n  if (!ele) return;\n  var rect = ele.getBoundingClientRect();\n  return {\n    top: rect.top + win.pageYOffset,\n    left: rect.left + win.pageXOffset\n  };\n};\n\nfn.offsetParent = function () {\n  return this.map(function (i, ele) {\n    var offsetParent = ele.offsetParent;\n\n    while (offsetParent && computeStyle(offsetParent, 'position') === 'static') {\n      offsetParent = offsetParent.offsetParent;\n    }\n\n    return offsetParent || docEle;\n  });\n};\n\nfn.position = function () {\n  var ele = this[0];\n  if (!ele) return;\n  var isFixed = computeStyle(ele, 'position') === 'fixed',\n      offset = isFixed ? ele.getBoundingClientRect() : this.offset();\n\n  if (!isFixed) {\n    var doc_1 = ele.ownerDocument;\n    var offsetParent = ele.offsetParent || doc_1.documentElement;\n\n    while ((offsetParent === doc_1.body || offsetParent === doc_1.documentElement) && computeStyle(offsetParent, 'position') === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent !== ele && isElement(offsetParent)) {\n      var parentOffset = cash(offsetParent).offset();\n      offset.top -= parentOffset.top + computeStyleInt(offsetParent, 'borderTopWidth');\n      offset.left -= parentOffset.left + computeStyleInt(offsetParent, 'borderLeftWidth');\n    }\n  }\n\n  return {\n    top: offset.top - computeStyleInt(ele, 'marginTop'),\n    left: offset.left - computeStyleInt(ele, 'marginLeft')\n  };\n};\n\nfn.children = function (comparator) {\n  return filtered(cash(unique(pluck(this, function (ele) {\n    return ele.children;\n  }))), comparator);\n};\n\nfn.contents = function () {\n  return cash(unique(pluck(this, function (ele) {\n    return ele.tagName === 'IFRAME' ? [ele.contentDocument] : ele.tagName === 'TEMPLATE' ? ele.content.childNodes : ele.childNodes;\n  })));\n};\n\nfn.find = function (selector) {\n  return cash(unique(pluck(this, function (ele) {\n    return find(selector, ele);\n  })));\n}; // @require core/variables.ts\n// @require collection/filter.ts\n// @require traversal/find.ts\n\n\nvar HTMLCDATARe = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n    scriptTypeRe = /^$|^module$|\\/(java|ecma)script/i,\n    scriptAttributes = ['type', 'src', 'nonce', 'noModule'];\n\nfunction evalScripts(node, doc) {\n  var collection = cash(node);\n  collection.filter('script').add(collection.find('script')).each(function (i, ele) {\n    if (scriptTypeRe.test(ele.type) && docEle.contains(ele)) {\n      // The script type is supported // The element is attached to the DOM // Using `documentElement` for broader browser support\n      var script_1 = createElement('script');\n      script_1.text = ele.textContent.replace(HTMLCDATARe, '');\n      each(scriptAttributes, function (i, attr) {\n        if (ele[attr]) script_1[attr] = ele[attr];\n      });\n      doc.head.insertBefore(script_1, null);\n      doc.head.removeChild(script_1);\n    }\n  });\n} // @require ./eval_scripts.ts\n\n\nfunction insertElement(anchor, target, left, inside, evaluate) {\n  if (inside) {\n    // prepend/append\n    anchor.insertBefore(target, left ? anchor.firstChild : null);\n  } else {\n    // before/after\n    anchor.parentNode.insertBefore(target, left ? anchor : anchor.nextSibling);\n  }\n\n  if (evaluate) {\n    evalScripts(target, anchor.ownerDocument);\n  }\n} // @require ./insert_element.ts\n\n\nfunction insertSelectors(selectors, anchors, inverse, left, inside, reverseLoop1, reverseLoop2, reverseLoop3) {\n  each(selectors, function (si, selector) {\n    each(cash(selector), function (ti, target) {\n      each(cash(anchors), function (ai, anchor) {\n        var anchorFinal = inverse ? target : anchor,\n            targetFinal = inverse ? anchor : target,\n            indexFinal = inverse ? ti : ai;\n        insertElement(anchorFinal, !indexFinal ? targetFinal : targetFinal.cloneNode(true), left, inside, !indexFinal);\n      }, reverseLoop3);\n    }, reverseLoop2);\n  }, reverseLoop1);\n  return anchors;\n}\n\nfn.after = function () {\n  return insertSelectors(arguments, this, false, false, false, true, true);\n};\n\nfn.append = function () {\n  return insertSelectors(arguments, this, false, false, true);\n};\n\nfn.appendTo = function (selector) {\n  return insertSelectors(arguments, this, true, false, true);\n};\n\nfn.before = function () {\n  return insertSelectors(arguments, this, false, true);\n};\n\nfn.insertAfter = function (selector) {\n  return insertSelectors(arguments, this, true, false, false, false, false, true);\n};\n\nfn.insertBefore = function (selector) {\n  return insertSelectors(arguments, this, true, true);\n};\n\nfn.prepend = function () {\n  return insertSelectors(arguments, this, false, true, true, true, true);\n};\n\nfn.prependTo = function (selector) {\n  return insertSelectors(arguments, this, true, true, true, false, false, true);\n};\n\nfn.replaceWith = function (selector) {\n  return this.before(selector).remove();\n};\n\nfn.replaceAll = function (selector) {\n  cash(selector).replaceWith(this);\n  return this;\n};\n\nfn.wrapAll = function (selector) {\n  var structure = cash(selector),\n      wrapper = structure[0];\n\n  while (wrapper.children.length) {\n    wrapper = wrapper.firstElementChild;\n  }\n\n  this.first().before(structure);\n  return this.appendTo(wrapper);\n};\n\nfn.wrap = function (selector) {\n  return this.each(function (i, ele) {\n    var wrapper = cash(selector)[0];\n    cash(ele).wrapAll(!i ? wrapper : wrapper.cloneNode(true));\n  });\n};\n\nfn.wrapInner = function (selector) {\n  return this.each(function (i, ele) {\n    var $ele = cash(ele),\n        contents = $ele.contents();\n    contents.length ? contents.wrapAll(selector) : $ele.append(selector);\n  });\n};\n\nfn.has = function (selector) {\n  var comparator = isString(selector) ? function (i, ele) {\n    return find(selector, ele).length;\n  } : function (i, ele) {\n    return ele.contains(selector);\n  };\n  return this.filter(comparator);\n};\n\nfn.is = function (comparator) {\n  var compare = getCompareFunction(comparator);\n  return some.call(this, function (ele, i) {\n    return compare.call(ele, i, ele);\n  });\n};\n\nfn.next = function (comparator, _all, _until) {\n  return filtered(cash(unique(pluck(this, 'nextElementSibling', _all, _until))), comparator);\n};\n\nfn.nextAll = function (comparator) {\n  return this.next(comparator, true);\n};\n\nfn.nextUntil = function (until, comparator) {\n  return this.next(comparator, true, until);\n};\n\nfn.not = function (comparator) {\n  var compare = getCompareFunction(comparator);\n  return this.filter(function (i, ele) {\n    return (!isString(comparator) || isElement(ele)) && !compare.call(ele, i, ele);\n  });\n};\n\nfn.parent = function (comparator) {\n  return filtered(cash(unique(pluck(this, 'parentNode'))), comparator);\n};\n\nfn.index = function (selector) {\n  var child = selector ? cash(selector)[0] : this[0],\n      collection = selector ? this : cash(child).parent().children();\n  return indexOf.call(collection, child);\n};\n\nfn.closest = function (comparator) {\n  var filtered = this.filter(comparator);\n  if (filtered.length) return filtered;\n  var $parent = this.parent();\n  if (!$parent.length) return filtered;\n  return $parent.closest(comparator);\n};\n\nfn.parents = function (comparator, _until) {\n  return filtered(cash(unique(pluck(this, 'parentElement', true, _until))), comparator);\n};\n\nfn.parentsUntil = function (until, comparator) {\n  return this.parents(comparator, until);\n};\n\nfn.prev = function (comparator, _all, _until) {\n  return filtered(cash(unique(pluck(this, 'previousElementSibling', _all, _until))), comparator);\n};\n\nfn.prevAll = function (comparator) {\n  return this.prev(comparator, true);\n};\n\nfn.prevUntil = function (until, comparator) {\n  return this.prev(comparator, true, until);\n};\n\nfn.siblings = function (comparator) {\n  return filtered(cash(unique(pluck(this, function (ele) {\n    return cash(ele).parent().children().not(ele);\n  }))), comparator);\n}; // @optional ./children.ts\n// @optional ./closest.ts\n// @optional ./contents.ts\n// @optional ./find.ts\n// @optional ./has.ts\n// @optional ./is.ts\n// @optional ./next.ts\n// @optional ./next_all.ts\n// @optional ./next_until.ts\n// @optional ./not.ts\n// @optional ./parent.ts\n// @optional ./parents.ts\n// @optional ./parents_until.ts\n// @optional ./prev.ts\n// @optional ./prev_all.ts\n// @optional ./prev_until.ts\n// @optional ./siblings.ts\n// @optional attributes/index.ts\n// @optional collection/index.ts\n// @optional css/index.ts\n// @optional data/index.ts\n// @optional dimensions/index.ts\n// @optional effects/index.ts\n// @optional events/index.ts\n// @optional forms/index.ts\n// @optional manipulation/index.ts\n// @optional offset/index.ts\n// @optional traversal/index.ts\n// @require core/index.ts\n// @priority -100\n// @require ./cash.ts\n// @require ./variables.ts\n\n\nif (typeof exports !== 'undefined') {\n  // Node.js\n  module.exports = cash;\n} else {\n  // Browser\n  win['cash'] = win['$'] = cash;\n}\n})();","const $ = require('cash-dom');\r\nconst createSlider = require('./widok-slider');\r\n\r\n$('.slider-with-bullets').each((index, element) => {\r\n  window.slider = createSlider({\r\n    wrap: `#slider-with-bullets-${index} .slider`,\r\n    bulletContainer: `#slider-with-bullets-${index} .bullets-container`,\r\n    bulletSelector: `#slider-with-bullets-${index} .bullet`,\r\n    useKeys: true,\r\n    mouseDrag: true,\r\n    arrowPrev: '.slider-with-bullets .arrow-left',\r\n    arrowNext: '.slider-with-bullets .arrow-right',\r\n  });\r\n});\r\n","const $ = require('cash-dom');\r\nconst createScrollItem = require('./widok-scrollItem.js');\r\nconst widok = require('./widok.js');\r\n\r\nconst fixedLink = $('.fixed-link');\r\nconst fixedLinkContainer = $('.fixed-link-container');\r\n\r\nconst fixedOrAbs = (scrollItem, isLayoutChange = false) => {\r\n  const currentFixedLink = scrollItem.options.currentFixedLink;\r\n  const currentFixedLinkH = scrollItem.options.currentFixedLinkH;\r\n  const currentFixedLinkW = scrollItem.options.currentFixedLinkW;\r\n  if (\r\n    scrollItem.offset + currentFixedLinkH + widok.em * 2 > widok.s + widok.h ||\r\n    scrollItem.offset + scrollItem.height < widok.s + widok.h\r\n  ) {\r\n    if (isLayoutChange || scrollItem.options.isFixed) {\r\n      scrollItem.options.isFixed = false;\r\n      currentFixedLink.removeClass('fixed');\r\n      if (scrollItem.offset + scrollItem.height < widok.s + widok.h) {\r\n        currentFixedLink.css({\r\n          top: scrollItem.height - currentFixedLinkW - widok.em,\r\n          bottom: 'auto',\r\n        });\r\n      } else if (\r\n        scrollItem.offset + currentFixedLinkH + widok.em * 2 >\r\n        widok.s + widok.h\r\n      ) {\r\n        currentFixedLink.css({\r\n          bottom: 'auto',\r\n          top: currentFixedLinkH - currentFixedLinkW + widok.em,\r\n        });\r\n      }\r\n    }\r\n  } else {\r\n    if (isLayoutChange || !scrollItem.options.isFixed) {\r\n      scrollItem.options.isFixed = true;\r\n      currentFixedLink.addClass('fixed');\r\n      currentFixedLink.css({\r\n        bottom: '1em',\r\n        top: 'auto',\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n$.each(fixedLinkContainer, (index, e) => {\r\n  const currentFixedLink = $(fixedLink[index]);\r\n  const item = createScrollItem(e, {\r\n    onScroll: scrollItem => fixedOrAbs(scrollItem),\r\n    isFixed: false,\r\n    currentFixedLink,\r\n    currentFixedLinkH: currentFixedLink.height(),\r\n    currentFixedLinkW: currentFixedLink.width(),\r\n  });\r\n\r\n  item._onResize = () => {\r\n    Object.getPrototypeOf(item)._onResize.call(item);\r\n    item.options.currentFixedLinkH = item.options.currentFixedLink.height();\r\n    item.options.currentFixedLinkW = item.options.currentFixedLink.width();\r\n    fixedOrAbs(item, true);\r\n  };\r\n});\r\n","const $ = require('cash-dom');\r\nrequire('./nav');\r\nrequire('./widok');\r\n\r\nconst bodyElement = $('body');\r\nif (bodyElement.hasClass('page-template-t-atrakcje')) require('./atrakcje');\r\nif ($('.fixed-link').length > 0) require('./fixed-link');\r\n","const $ = require('cash-dom');\r\n\r\n$('#burger').on('click', () => {\r\n  $('#nav').toggleClass('opened');\r\n});\r\n","const $ = require('cash-dom');\r\n\r\nconst createHoverable = (function () {\r\n  class Hoverable {\r\n    constructor(element) {\r\n      this.element = $(element);\r\n      this.hasHoveredClass = false;\r\n      this.isTouched = false;\r\n\r\n      this.element.on({\r\n        mouseenter: this.activate.bind(this),\r\n        mouseleave: this.deactivate.bind(this),\r\n        touchstart: () => {\r\n          this.isTouched = true;\r\n          clearTimeout(this.timeout);\r\n          this.deactivate();\r\n        },\r\n        touchend: () => {\r\n          clearTimeout(this.timeout);\r\n          this.timeout = setTimeout(() => {\r\n            this.isTouched = false;\r\n          }, 100);\r\n        },\r\n      });\r\n    }\r\n\r\n    activate() {\r\n      if (this.hasHoveredClass) return;\r\n      if (this.isTouched) return;\r\n      this.element.addClass('hovered');\r\n      this.hasHoveredClass = true;\r\n    }\r\n\r\n    deactivate() {\r\n      if (!this.hasHoveredClass) return;\r\n      this.element.removeClass('hovered');\r\n      this.hasHoveredClass = false;\r\n    }\r\n  }\r\n\r\n  return function (options) {\r\n    return new Hoverable(options);\r\n  };\r\n})();\r\n\r\nif (typeof module !== 'undefined') module.exports = createHoverable;\r\n","/**\r\n * create new scroll item\r\n * @param {selector} element element to scroll\r\n * @param {object} options extra options\r\n * @param {function} options.onScroll function(scrollItem)\r\n * @param {function} options.onStateChange function(prop, value, scrollItem)\r\n * @param {bool} options.addClasses = false; Adds classes like `.isOnScreen`\r\n * @returns {object} scrollItem\r\n */\r\n\r\nconst $ = require('cash-dom');\r\nconst widok = require('./widok');\r\n\r\nconst createScrollItem = (function () {\r\n  class ScrollItem {\r\n    constructor(element, options) {\r\n      this.element = $(element);\r\n      this.offset = 0;\r\n      this.height = 0;\r\n      this.addClasses = options.addClasses;\r\n      this.isAboveScreen = false;\r\n      this.isCrossingScreenTop = false;\r\n      this.isCrossingScreenBottom = false;\r\n      this.isBelowScreen = false;\r\n      this.isOnScreen = false;\r\n      this.options = options;\r\n      this.onStateChange = this.options.onStateChange;\r\n      this.onScroll = this.options.onScroll;\r\n    }\r\n    _onResize() {\r\n      this.offset = this.element.offset().top;\r\n      this.height = this.element.outerHeight();\r\n      this._onScroll();\r\n    }\r\n    _onScroll() {\r\n      this.checkScreenRelation();\r\n      if (this.onScroll !== undefined) {\r\n        this.onScroll.call(this, this);\r\n      }\r\n    }\r\n    checkScreenRelation() {\r\n      if (this.offset + this.height < widok.s) {\r\n        this.setPropClass('AboveScreen', true);\r\n        this.setPropClass('CrossingScreenTop', false);\r\n        this.setPropClass('CrossingScreenBottom', false);\r\n        this.setPropClass('BelowScreen', false);\r\n        this.setPropClass('OnScreen', false);\r\n        return;\r\n      }\r\n      if (this.offset > widok.s + widok.h) {\r\n        this.setPropClass('AboveScreen', false);\r\n        this.setPropClass('CrossingScreenTop', false);\r\n        this.setPropClass('CrossingScreenBottom', false);\r\n        this.setPropClass('BelowScreen', true);\r\n        this.setPropClass('OnScreen', false);\r\n        return;\r\n      }\r\n      this.setPropClass('AboveScreen', false);\r\n      this.setPropClass('BelowScreen', false);\r\n      this.setPropClass('OnScreen', true);\r\n      this.setPropClass(\r\n        'CrossingScreenTop',\r\n        this.offset < widok.s && this.offset + this.height > widok.s\r\n      );\r\n      this.setPropClass(\r\n        'CrossingScreenBottom',\r\n        this.offset < widok.s + widok.h &&\r\n          this.offset + this.height > widok.s + widok.h\r\n      );\r\n    }\r\n    setPropClass(prop, value) {\r\n      if (this['is' + prop] !== value) {\r\n        this['is' + prop] = value;\r\n        if (this.addClasses) {\r\n          if (value) this.element.addClass(prop);\r\n          else this.element.removeClass(prop);\r\n        }\r\n        if (this.onStateChange !== void 0) {\r\n          this.onStateChange.call(this, prop, value, this);\r\n        }\r\n      }\r\n    }\r\n    screenPos(heightOffset) {\r\n      if (heightOffset === void 0) heightOffset = 0;\r\n      return (this.offset + this.height * heightOffset - widok.s) / widok.h;\r\n    }\r\n  }\r\n\r\n  const scrollItemCollection = [];\r\n\r\n  window.addEventListener('afterLayoutChange', function () {\r\n    scrollItemCollection.map(function (e) {\r\n      e._onResize();\r\n    });\r\n  });\r\n\r\n  window.addEventListener('scroll', function () {\r\n    scrollItemCollection.map(function (e) {\r\n      e._onScroll();\r\n    });\r\n  });\r\n\r\n  return function (element, options) {\r\n    if (options === undefined) options = {};\r\n    const scrollItem = new ScrollItem(element, options);\r\n    scrollItemCollection.push(scrollItem);\r\n    return scrollItem;\r\n  };\r\n})();\r\n\r\nif (typeof module !== 'undefined') module.exports = createScrollItem;\r\n","/**\r\n * Create a slider. Vertical slider might not work yet.\r\n * @param {object} options extra options\r\n * @param {selector} options.wrap selector of the slider wrap\r\n * @param {selector} options.slideSelector default='.single-slide', selector of a single slide, searched inside wrap\r\n * @param {boolean} options.shouldHaveBullets default=true,\r\n * @param {selector} options.bulletContainer\r\n * @param {selector} options.bulletSelector\r\n * @param {boolean} options.isVertical default=false, direction of the slider\r\n * @param {number} options.initialSlide default=0, id of the initially selected slide\r\n * @param {number} options.duration default=300, duration of the sliding animation\r\n * @param {boolean} options.mouseDrag default=false, allows slider to be dragged with the mouse\r\n * @param {boolean} options.touchDrag default=false, allows slider to be dragged on a touchscreen\r\n * @param {boolean} options.slideOnWheel default=false,\r\n * @param {boolean} options.useKeys default=false, changes slides on arrow keys, can be changed later\r\n * @param {selector} options.arrowPrev selector of the up arrow, searched in the whole document\r\n * @param {selector} options.arrowNext analogous\r\n * @param {function} options.onActivate callback to be called when a slide activates\r\n * @param {function} options.onDeactivate analogous\r\n * @param {boolean} options.loop default=false\r\n * @param {string} options.animationType default=\"slide\", 'fade' - fade effect\r\n * @param {boolean} options.slidesAsLinks default=false, clicking on a slide activates it\r\n * @param {boolean} options.adjustHeight default=false, after switching slides the height of the slider is changed\r\n * @returns Slider object\r\n */\r\n\r\nconst $ = require('cash-dom');\r\nconst createHoverable = require('./widok-hoverable');\r\n\r\nconst createSlider = (function () {\r\n  class Slider {\r\n    constructor(options) {\r\n      this.id = ++Slider.lastId;\r\n      this.wrap = $(options.wrap);\r\n      if (this.wrap.length !== 1) return;\r\n\r\n      this.prepareOptions(options);\r\n      this.currentSlideId = this.options.initialSlide; // id of the current slide\r\n      this.slideOffset = 0; // number of pixels from current slide beginning\r\n      this.position = 0; // current scroll amount in pixels\r\n      this.barSize = 0; // size of the entire scroll bar\r\n      this.size = 0; // size of the sizer element\r\n      this.isSliding = false; // is slider currently being animated\r\n      this.isDragged = false; // is slider currently being dragged\r\n      this.isEnabled = options.isEnabled;\r\n      if (this.isEnabled === undefined) this.isEnabled = true;\r\n\r\n      this.prepareArrows();\r\n      this.prepareSlides();\r\n      this.prepareWheel();\r\n      this.prepareDrag();\r\n\r\n      this.checkSize = this.checkSize.bind(this);\r\n      this.onMouseMove = this.onMouseMove.bind(this);\r\n      this.endMouseMove = this.endMouseMove.bind(this);\r\n      window.addEventListener('layoutChange', this.checkSize);\r\n\r\n      if (this.options.loop) {\r\n        this.currentSlideId = this.slides.length / 3;\r\n        this.applyPosition();\r\n      }\r\n\r\n      this.slides[this.currentSlideId].activate();\r\n    }\r\n\r\n    prepareOptions(options) {\r\n      this.options = {\r\n        slideOnWheel: false,\r\n        shouldHaveBullets: true,\r\n        slideSelector: '.single-slide',\r\n        isVertical: false,\r\n        initialSlide: 0,\r\n        duration: 300,\r\n        mouseDrag: false,\r\n        touchDrag: false,\r\n        useKeys: false,\r\n        loop: false,\r\n        slidesAsLinks: false,\r\n        adjustHeight: false,\r\n        animationType: 'slide',\r\n      };\r\n      for (const optionName in options) {\r\n        this.options[optionName] = options[optionName];\r\n      }\r\n    }\r\n\r\n    prepareSlides() {\r\n      this.sizer = $('<div class=\"f3-slider-sizer\">')\r\n        .css({\r\n          position: 'relative',\r\n          height: '100%',\r\n          margin: '0 auto',\r\n        })\r\n        .appendTo(this.wrap);\r\n      this.bar = $('<div class=\"f3-slider-bar\">').appendTo(this.sizer);\r\n      this.slides = [];\r\n\r\n      if (this.options.shouldHaveBullets) {\r\n        if (this.options.bulletContainer === undefined) {\r\n          this.bulletContainer = $(document.createElement('div'))\r\n            .addClass('f3-slider-bullet-container')\r\n            .appendTo(this.wrap)\r\n            .on('touchstart', event => {\r\n              if (!this.isEnabled) return;\r\n              event.stopPropagation();\r\n            });\r\n        } else {\r\n          this.bulletContainer = $(this.options.bulletContainer);\r\n        }\r\n      }\r\n\r\n      const foundSlides = this.wrap.find(this.options.slideSelector);\r\n      if (this.options.loop) {\r\n        foundSlides.clone().map((index, element) => {\r\n          let slide = new Slide(element, this);\r\n          slide.element.appendTo(this.bar);\r\n          this.slides.push(slide);\r\n        });\r\n        foundSlides.clone().map((index, element) => {\r\n          let slide = new Slide(element, this);\r\n          slide.element.appendTo(this.bar);\r\n          this.slides.push(slide);\r\n        });\r\n      }\r\n      foundSlides.map((index, element) => {\r\n        let slide = new Slide(element, this);\r\n        slide.element.appendTo(this.bar);\r\n        this.slides.push(slide);\r\n      });\r\n\r\n      this.slides.forEach(slide => slide.createBullet());\r\n\r\n      this.wrap.css({\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n      });\r\n      this.bar.css({\r\n        position: 'absolute',\r\n        height: 100 + '%',\r\n        width: 100 + '%',\r\n        left: 0,\r\n      });\r\n      if (!this.options.isVertical) {\r\n        const weightSum = this.slides.reduce(\r\n          (prev, curr) => prev + curr.weight,\r\n          0\r\n        );\r\n        this.bar.css({\r\n          width: weightSum * 100 + '%',\r\n          display: 'flex',\r\n          alignItems: 'flex-start',\r\n        });\r\n        this.slides.map(slide =>\r\n          slide.element.css({\r\n            width: (100 * slide.weight) / weightSum + '%',\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    prepareArrows() {\r\n      this.isArrowPrevActive = true;\r\n      this.isArrowNextActive = true;\r\n      this.arrowPrev = $(this.options.arrowPrev);\r\n      this.arrowNext = $(this.options.arrowNext);\r\n      if (this.options.arrowNext === undefined) {\r\n        this.arrowNext = this.wrap.find('.arrow-next');\r\n      }\r\n      if (this.options.arrowPrev === undefined) {\r\n        this.arrowPrev = this.wrap.find('.arrow-prev');\r\n      }\r\n\r\n      if (this.arrowNext.length > 0) {\r\n        this.arrowNext.on({\r\n          click: this.nextSlide.bind(this),\r\n          touchstart: event => event.stopPropagation(),\r\n        });\r\n        createHoverable(this.arrowNext);\r\n      }\r\n      if (this.arrowPrev.length > 0) {\r\n        this.arrowPrev.on({\r\n          click: this.prevSlide.bind(this),\r\n          touchstart: event => event.stopPropagation(),\r\n        });\r\n        createHoverable(this.arrowPrev);\r\n      }\r\n      $(window).on('keydown', event => {\r\n        if (!this.options.useKeys) return;\r\n        if (\r\n          (!this.options.isVertical && event.which === 39) ||\r\n          (this.options.isVertical && event.which === 40)\r\n        ) {\r\n          this.nextSlide();\r\n        } else if (\r\n          (!this.options.isVertical && event.which === 37) ||\r\n          (this.options.isVertical && event.which === 38)\r\n        ) {\r\n          this.prevSlide();\r\n        }\r\n      });\r\n    }\r\n\r\n    prepareWheel() {\r\n      if (this.options.slideOnWheel) {\r\n        this.wrap.on('wheel', event => {\r\n          if (!this.isEnabled) return;\r\n\r\n          event.stopPropagation();\r\n          event.preventDefault();\r\n          if (this.isSliding) return;\r\n\r\n          if (event.deltaY > 0) {\r\n            const slideBottom = this.slides[this.currentSlideId].size;\r\n            const wrapBottom = this.size - this.slideOffset;\r\n            if (slideBottom <= wrapBottom + 1) {\r\n              this.nextSlide();\r\n            } else {\r\n              this.slideOffset = Math.max(\r\n                this.slideOffset - 150,\r\n                -this.slides[this.currentSlideId].size + this.size\r\n              );\r\n              this.applyPosition();\r\n            }\r\n          } else if (event.deltaY < 0) {\r\n            if (0 <= this.slideOffset + 1) {\r\n              this.prevSlide();\r\n            } else {\r\n              this.slideOffset = Math.min(this.slideOffset + 150, 0);\r\n              this.applyPosition();\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    prepareDrag() {\r\n      if (this.options.touchDrag) {\r\n        this.endDrag = this.endDrag.bind(this);\r\n        this.onDrag = this.onDrag.bind(this);\r\n        this.wrap.on('touchstart', event => {\r\n          if (!this.isEnabled) return;\r\n          // TODO: add an option to switch this\r\n          // event.preventDefault();\r\n          if (this.isSliding) return;\r\n          this.dragStart = {\r\n            x: event.changedTouches[0].pageX,\r\n            y: event.changedTouches[0].pageY,\r\n          };\r\n          this.onMoveStart();\r\n          window.addEventListener('touchend', this.endDrag);\r\n          window.addEventListener('touchmove', this.onDrag);\r\n        });\r\n      }\r\n      if (this.options.mouseDrag) {\r\n        this.wrap.on('mousedown', event => {\r\n          if (!this.isEnabled) return;\r\n          event.preventDefault();\r\n          if (this.isSliding) return;\r\n          this.dragStart = {\r\n            x: event.pageX,\r\n            y: event.pageY,\r\n          };\r\n          this.onMoveStart();\r\n          window.addEventListener('mouseup', this.endMouseMove);\r\n          window.addEventListener('mousemove', this.onMouseMove);\r\n        });\r\n      }\r\n    }\r\n\r\n    onMoveStart() {\r\n      this.isDragged = true;\r\n      this.lastDrag = {\r\n        lastSaveId: 0,\r\n        values: [\r\n          {\r\n            x: this.dragStart.x,\r\n            y: this.dragStart.y,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n\r\n    onDrag(event) {\r\n      const currentPos = {\r\n        x: event.changedTouches[0].pageX,\r\n        y: event.changedTouches[0].pageY,\r\n      };\r\n      this.onMove(currentPos);\r\n    }\r\n\r\n    onMouseMove(event) {\r\n      const currentPos = {\r\n        x: event.pageX,\r\n        y: event.pageY,\r\n      };\r\n      this.onMove(currentPos);\r\n    }\r\n\r\n    onMove(currentPos) {\r\n      this.lastDrag.lastSaveId = (this.lastDrag.lastSaveId + 1) % 10;\r\n      this.lastDrag.values[this.lastDrag.lastSaveId] = currentPos;\r\n      const axis = this.options.isVertical ? 'y' : 'x';\r\n      const diff = currentPos[axis] - this.dragStart[axis];\r\n      this.position =\r\n        this.slides[this.currentSlideId].offset - diff - this.slideOffset / 2;\r\n\r\n      if (this.options.isVertical) {\r\n        this.bar.css({\r\n          top: -this.position,\r\n        });\r\n      } else {\r\n        this.bar.css({\r\n          left: -this.position,\r\n        });\r\n      }\r\n    }\r\n\r\n    endDrag(event) {\r\n      const dragEnd = {\r\n        x: event.changedTouches[0].pageX,\r\n        y: event.changedTouches[0].pageY,\r\n      };\r\n      this.endMove(dragEnd);\r\n      window.removeEventListener('touchend', this.endDrag);\r\n      window.removeEventListener('touchmove', this.onDrag);\r\n    }\r\n\r\n    endMouseMove(event) {\r\n      const dragEnd = {\r\n        x: event.pageX,\r\n        y: event.pageY,\r\n      };\r\n      this.endMove(dragEnd);\r\n      window.removeEventListener('mouseup', this.endMouseMove);\r\n      window.removeEventListener('mousemove', this.onMouseMove);\r\n    }\r\n\r\n    endMove(dragEnd) {\r\n      const partNeededToSlide = 1 / 100;\r\n      this.isDragged = false;\r\n      const axis = this.options.isVertical ? 'y' : 'x';\r\n\r\n      let currentPos = this.slides[this.currentSlideId].offset;\r\n      currentPos -= dragEnd[axis] - this.dragStart[axis];\r\n\r\n      const applyFoundSlide = found => {\r\n        this.currentSlideId = found;\r\n        this.slideOffset = 0;\r\n      };\r\n\r\n      // previous position\r\n      if (dragEnd[axis] > this.dragStart[axis]) {\r\n        let found = 0;\r\n        for (let i = 0; i < this.slides.length; i++) {\r\n          const slideCenter = this.slides[i].offset + this.slides[i].size / 2;\r\n          const wrapStart = currentPos - this.slideOffset / 2;\r\n\r\n          if (slideCenter > wrapStart) {\r\n            found = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        const isSlidedEnoughToChange = () => {\r\n          const slidedAmount = dragEnd[axis] - this.dragStart[axis];\r\n          const amountNedeedToSlide =\r\n            this.slides[this.currentSlideId].size * partNeededToSlide;\r\n          return slidedAmount > amountNedeedToSlide;\r\n        };\r\n\r\n        if (this.currentSlideId === found) {\r\n          if (isSlidedEnoughToChange() && found > 0) applyFoundSlide(found - 1);\r\n        } else applyFoundSlide(found);\r\n      }\r\n\r\n      // next position\r\n      else if (dragEnd[axis] < this.dragStart[axis]) {\r\n        let found = this.slides.length - 1;\r\n        for (let i = 0; i < this.slides.length; i++) {\r\n          const slideCenter = this.slides[i].offset + this.slides[i].size / 2;\r\n          const wrapEnd = currentPos - this.slideOffset / 2 + this.size;\r\n          if (slideCenter > wrapEnd) {\r\n            found = Math.max(i - 1, 0);\r\n            break;\r\n          }\r\n        }\r\n\r\n        const isSlidedEnoughToChange = () => {\r\n          const slidedAmount = this.dragStart[axis] - dragEnd[axis];\r\n          const amountNedeedToSlide =\r\n            this.slides[this.currentSlideId].size * partNeededToSlide;\r\n          return slidedAmount > amountNedeedToSlide;\r\n        };\r\n\r\n        if (this.currentSlideId === found) {\r\n          if (isSlidedEnoughToChange() && found + 1 < this.slides.length)\r\n            applyFoundSlide(found + 1);\r\n        } else applyFoundSlide(found);\r\n      }\r\n\r\n      this.applyPosition();\r\n    }\r\n\r\n    checkSize() {\r\n      if (this.options.isVertical) {\r\n        this.size = this.sizer.height();\r\n      } else {\r\n        this.size = this.sizer.width();\r\n      }\r\n      this.slideOffset = 0;\r\n      this.barSize = 0;\r\n      this.gutter =\r\n        this.slides[0].element.outerWidth(true) -\r\n        this.slides[0].element.outerWidth();\r\n\r\n      const sliderOffset = this.isVertical\r\n        ? this.bar.offset().top\r\n        : this.bar.offset().left;\r\n      this.slides.map(slide => {\r\n        this.barSize += slide.checkSize(sliderOffset);\r\n      });\r\n      this.applyPosition(0);\r\n\r\n      if (!this.isVertical) {\r\n        const maxHeight = this.slides.reduce(\r\n          (prev, curr) => Math.max(prev, curr.element[0].scrollHeight),\r\n          0\r\n        );\r\n        if (this.options.adjustHeight) {\r\n          this.wrap.css({\r\n            height: this.slides[this.currentSlideId].element[0].scrollHeight,\r\n          });\r\n        } else {\r\n          this.wrap.css({\r\n            height: maxHeight,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    prevSlide() {\r\n      if (this.currentSlideId <= 0) return;\r\n      if (this.isSliding) return;\r\n      this.currentSlideId--;\r\n      this.slideOffset = 0;\r\n      this.applyPosition();\r\n    }\r\n\r\n    nextSlide() {\r\n      if (this.currentSlideId >= this.slides.length - 1) return;\r\n      if (this.isSliding) return;\r\n      this.currentSlideId++;\r\n      this.slideOffset = 0;\r\n      this.applyPosition();\r\n    }\r\n\r\n    applyPosition(duration) {\r\n      const adjustPosition = () => {\r\n        if (this.options.loop) {\r\n          const trueLength = this.slides.length / 3;\r\n          let isAdjusted = false;\r\n          if (this.currentSlideId < trueLength) {\r\n            this.currentSlideId += trueLength;\r\n            isAdjusted = true;\r\n          } else if (this.currentSlideId >= 2 * trueLength) {\r\n            this.currentSlideId -= trueLength;\r\n            isAdjusted = true;\r\n          }\r\n          if (isAdjusted) {\r\n            this.wrap.addClass('adjusting');\r\n            this.applyPosition(0);\r\n            setTimeout(() => {\r\n              this.wrap.removeClass('adjusting');\r\n            }, 100);\r\n          }\r\n        }\r\n      };\r\n      this.isSliding = true;\r\n      if (duration === undefined) {\r\n        duration = this.options.duration;\r\n      }\r\n      this.slideOffset = this.size - this.slides[this.currentSlideId].size;\r\n      this.position =\r\n        this.slides[this.currentSlideId].offset - this.slideOffset / 2;\r\n\r\n      this.slides.forEach((slide, index) => {\r\n        if (index < this.currentSlideId) slide.markAsPrev();\r\n        else if (index > this.currentSlideId) slide.markAsNext();\r\n        else slide.activate();\r\n      });\r\n      this.handleArrows();\r\n\r\n      let css;\r\n      if (this.options.animationType === 'fade') {\r\n        css = {\r\n          transition: `opacity ${duration / 2 / 1000}s`,\r\n          opacity: 0,\r\n        };\r\n      } else {\r\n        css = {\r\n          transition: `${duration / 1000}s`,\r\n        };\r\n      }\r\n\r\n      this.bar.css(css);\r\n\r\n      if (this.options.isVertical) {\r\n        css.top = -this.position;\r\n      } else {\r\n        css.left = -this.position;\r\n      }\r\n\r\n      if (this.options.animationType === 'fade') {\r\n        setTimeout(() => {\r\n          this.bar.css(css);\r\n          this.bar.css({\r\n            opacity: 1,\r\n          });\r\n          this.isSliding = false;\r\n\r\n          // adjust the position if slider needs to loop\r\n          adjustPosition();\r\n        }, duration / 2);\r\n      } else {\r\n        this.bar.css(css);\r\n        setTimeout(() => {\r\n          this.bar.css({\r\n            transition: 'none',\r\n          });\r\n          this.isSliding = false;\r\n\r\n          // adjust the position if slider needs to loop\r\n          adjustPosition();\r\n        }, duration);\r\n      }\r\n      setTimeout(() => {\r\n        if (this.options.adjustHeight) {\r\n          this.wrap.css({\r\n            height: this.slides[this.currentSlideId].element[0].scrollHeight,\r\n          });\r\n        }\r\n      }, duration);\r\n    }\r\n\r\n    handleArrows() {\r\n      if (this.currentSlideId === this.slides.length - 1) {\r\n        if (this.isArrowNextActive) {\r\n          this.arrowNext.addClass('disabled');\r\n          this.isArrowNextActive = false;\r\n        }\r\n      } else if (!this.isArrowNextActive) {\r\n        this.arrowNext.removeClass('disabled');\r\n        this.isArrowNextActive = true;\r\n      }\r\n\r\n      if (this.currentSlideId === 0) {\r\n        if (this.isArrowPrevActive) {\r\n          this.arrowPrev.addClass('disabled');\r\n          this.isArrowPrevActive = false;\r\n        }\r\n      } else if (!this.isArrowPrevActive) {\r\n        this.arrowPrev.removeClass('disabled');\r\n        this.isArrowPrevActive = true;\r\n      }\r\n    }\r\n  }\r\n  Slider.lastId = -1;\r\n\r\n  class Slide {\r\n    constructor(element, slider) {\r\n      this.element = $(element);\r\n      if (this.element.length !== 1) return;\r\n\r\n      this.content = $('<div class=\"single-slide-content\">')\r\n        .append(this.element.children())\r\n        .appendTo(this.element);\r\n\r\n      this.slider = slider;\r\n      this.weight = this.element.data('weight');\r\n      if (this.weight === undefined) this.weight = 1;\r\n      this.id = this.slider.slides.length;\r\n      this.realId = this.id;\r\n      this.directionToActive = undefined;\r\n      this.size = 0;\r\n      this.offset = 0;\r\n\r\n      if (this.slider.options.slidesAsLinks) {\r\n        this.element.on('click', () => {\r\n          if (this.directionToActive === 0) return;\r\n          if (this.slider.isSliding) return;\r\n          this.goTo();\r\n        });\r\n      }\r\n    }\r\n\r\n    createBullet() {\r\n      if (this.slider.bulletContainer) {\r\n        if (this.slider.options.loop) {\r\n          if (this.id >= (2 * this.slider.slides.length) / 3) {\r\n            this.realId -= (this.slider.slides.length / 3) * 2;\r\n          } else if (this.id >= this.slider.slides.length / 3) {\r\n            this.realId -= this.slider.slides.length / 3;\r\n          }\r\n        }\r\n        if (\r\n          !this.slider.options.loop ||\r\n          (this.id >= this.slider.slides.length / 3 &&\r\n            this.id < (2 * this.slider.slides.length) / 3)\r\n        ) {\r\n          this.bullet = new Bullet(this.slider, this);\r\n        } else {\r\n          this.bulletLink = {\r\n            isLink: true,\r\n            target: this.slider.slides[\r\n              this.realId + this.slider.slides.length / 3\r\n            ],\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    checkSize(sliderOffset) {\r\n      if (this.slider.isVertical) {\r\n        this.offset = this.element.offset().top - sliderOffset;\r\n        this.size = this.content.outerHeight(true);\r\n      } else {\r\n        this.offset = this.element.offset().left - sliderOffset;\r\n        this.size = this.content.outerWidth(true);\r\n      }\r\n\r\n      return this.size;\r\n    }\r\n\r\n    goTo() {\r\n      this.slider.currentSlideId = this.id;\r\n      this.slider.applyPosition();\r\n    }\r\n\r\n    activate() {\r\n      if (this.directionToActive !== 0) {\r\n        if (this.bullet !== undefined) this.bullet.element.addClass('active');\r\n        else if (this.bulletLink !== undefined) {\r\n          this.bulletLink.target.bullet.element.addClass('active');\r\n        }\r\n        this.element.addClass('active').removeClass('slide-prev slide-next');\r\n        this.directionToActive = 0;\r\n        if (this.slider.options.onActivate !== undefined) {\r\n          this.slider.options.onActivate.call(this, this, this.slider);\r\n        }\r\n      }\r\n    }\r\n\r\n    deactivate() {\r\n      if (\r\n        this.directionToActive === 0 ||\r\n        this.directionToActive === undefined\r\n      ) {\r\n        this.bullet && this.bullet.element.removeClass('active');\r\n        this.element.removeClass('active');\r\n        if (this.slider.options.onDeactivate !== undefined) {\r\n          this.slider.options.onDeactivate.call(this, this, this.slider);\r\n        }\r\n      }\r\n    }\r\n\r\n    markAsPrev() {\r\n      this.deactivate();\r\n      if (this.directionToActive >= 0 || this.directionToActive === undefined) {\r\n        this.element.removeClass('slide-next').addClass('slide-prev');\r\n        this.directionToActive = -1;\r\n      }\r\n    }\r\n\r\n    markAsNext() {\r\n      this.deactivate();\r\n      if (this.directionToActive <= 0 || this.directionToActive === undefined) {\r\n        this.element.removeClass('slide-prev').addClass('slide-next');\r\n        this.directionToActive = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  class Bullet {\r\n    constructor(slider, slide, dummy) {\r\n      this.slider = slider;\r\n      this.slide = slide;\r\n      if (this.slider.options.bulletSelector === undefined) {\r\n        this.element = $(document.createElement('div'))\r\n          .addClass('f3-slider-bullet')\r\n          .appendTo(this.slider.bulletContainer);\r\n      } else {\r\n        this.element = this.slider.bulletContainer\r\n          .find(this.slider.options.bulletSelector)\r\n          .eq(this.slide.realId);\r\n      }\r\n      this.element.on('click', this.slide.goTo.bind(this.slide));\r\n      createHoverable(this.element);\r\n    }\r\n  }\r\n\r\n  return function (options) {\r\n    return new Slider(options);\r\n  };\r\n})();\r\n\r\nif (typeof module !== 'undefined') module.exports = createSlider;\r\n","function throttle(ms, callback) {\r\n  let lastCall = 0;\r\n  let timeout;\r\n  return a => {\r\n    const now = new Date().getTime();\r\n    if (now - lastCall >= ms) {\r\n      lastCall = now;\r\n      callback(a);\r\n    } else {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout((a => callback.bind(this, a))(a), ms);\r\n    }\r\n  };\r\n}\r\n\r\nif (typeof module !== 'undefined') module.exports = throttle;\r\n","const $ = require('cash-dom');\r\nconst throttle = require('./widok-throttle');\r\n\r\nconst widok = {\r\n  h: 0,\r\n  w: 0,\r\n  s: 0,\r\n  em: 0,\r\n  sizeCheck: () => {\r\n    widok.h = $(window).height();\r\n    widok.w = $(window).width();\r\n    widok.em = parseFloat($('body').css('font-size'));\r\n    window.dispatchEvent(new CustomEvent('layoutChange'));\r\n    widok.scrollCheck();\r\n    window.dispatchEvent(new CustomEvent('afterLayoutChange'));\r\n  },\r\n  scrollCheck: () => {\r\n    widok.s = window.scrollY;\r\n  },\r\n};\r\n\r\n$(window).on({\r\n  resize: throttle(100, widok.sizeCheck),\r\n  load: widok.sizeCheck,\r\n  scroll: widok.scrollCheck,\r\n});\r\n\r\n$(document).on('ready', widok.sizeCheck);\r\n\r\nif (typeof module !== 'undefined') module.exports = widok;\r\n"]}"}