{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/cash-dom/dist/cash.js","src/js/atrakcje.js","src/js/main.js","src/js/nav.js","src/js/widok-hoverable.js","src/js/widok-slider.js","src/js/widok-throttle.js","src/js/widok.js"],"names":[],"mappingsl0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"../../","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvY2FzaC1kb20vZGlzdC9jYXNoLmpzIiwic3JjL2pzL2F0cmFrY2plLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvbmF2LmpzIiwic3JjL2pzL3dpZG9rLWhvdmVyYWJsZS5qcyIsInNyYy9qcy93aWRvay1zbGlkZXIuanMiLCJzcmMvanMvd2lkb2stdGhyb3R0bGUuanMiLCJzcmMvanMvd2lkb2suanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbDBDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbHNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyogTUlUIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWJpb3NwYW1waW5hdG8vY2FzaCAqL1xuKGZ1bmN0aW9uKCl7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIHByb3BNYXAgPSB7XG4gIC8qIEdFTkVSQUwgKi9cbiAgXCJjbGFzc1wiOiAnY2xhc3NOYW1lJyxcbiAgY29udGVudGVkaXRhYmxlOiAnY29udGVudEVkaXRhYmxlJyxcblxuICAvKiBMQUJFTCAqL1xuICBcImZvclwiOiAnaHRtbEZvcicsXG5cbiAgLyogSU5QVVQgKi9cbiAgcmVhZG9ubHk6ICdyZWFkT25seScsXG4gIG1heGxlbmd0aDogJ21heExlbmd0aCcsXG4gIHRhYmluZGV4OiAndGFiSW5kZXgnLFxuXG4gIC8qIFRBQkxFICovXG4gIGNvbHNwYW46ICdjb2xTcGFuJyxcbiAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuXG4gIC8qIElNQUdFICovXG4gIHVzZW1hcDogJ3VzZU1hcCdcbn07XG5cbmZ1bmN0aW9uIGF0dGVtcHQoZm4sIGFyZykge1xuICB0cnkge1xuICAgIHJldHVybiBmbihhcmcpO1xuICB9IGNhdGNoIChfYSkge1xuICAgIHJldHVybiBhcmc7XG4gIH1cbn1cblxudmFyIGRvYyA9IGRvY3VtZW50LFxuICAgIHdpbiA9IHdpbmRvdyxcbiAgICBkb2NFbGUgPSBkb2MuZG9jdW1lbnRFbGVtZW50LFxuICAgIGNyZWF0ZUVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudC5iaW5kKGRvYyksXG4gICAgZGl2ID0gY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgdGFibGUgPSBjcmVhdGVFbGVtZW50KCd0YWJsZScpLFxuICAgIHRib2R5ID0gY3JlYXRlRWxlbWVudCgndGJvZHknKSxcbiAgICB0ciA9IGNyZWF0ZUVsZW1lbnQoJ3RyJyksXG4gICAgaXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGUsXG4gICAgY29uY2F0ID0gQXJyYXlQcm90b3R5cGUuY29uY2F0LFxuICAgIGZpbHRlciA9IEFycmF5UHJvdG90eXBlLmZpbHRlcixcbiAgICBpbmRleE9mID0gQXJyYXlQcm90b3R5cGUuaW5kZXhPZixcbiAgICBtYXAgPSBBcnJheVByb3RvdHlwZS5tYXAsXG4gICAgcHVzaCA9IEFycmF5UHJvdG90eXBlLnB1c2gsXG4gICAgc2xpY2UgPSBBcnJheVByb3RvdHlwZS5zbGljZSxcbiAgICBzb21lID0gQXJyYXlQcm90b3R5cGUuc29tZSxcbiAgICBzcGxpY2UgPSBBcnJheVByb3RvdHlwZS5zcGxpY2U7XG52YXIgaWRSZSA9IC9eIyg/OltcXHctXXxcXFxcLnxbXlxceDAwLVxceGEwXSkqJC8sXG4gICAgY2xhc3NSZSA9IC9eXFwuKD86W1xcdy1dfFxcXFwufFteXFx4MDAtXFx4YTBdKSokLyxcbiAgICBodG1sUmUgPSAvPC4rPi8sXG4gICAgdGFnUmUgPSAvXlxcdyskLzsgLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuZnVuY3Rpb24gZmluZChzZWxlY3RvciwgY29udGV4dCkge1xuICByZXR1cm4gIXNlbGVjdG9yIHx8ICFpc0RvY3VtZW50KGNvbnRleHQpICYmICFpc0VsZW1lbnQoY29udGV4dCkgPyBbXSA6IGNsYXNzUmUudGVzdChzZWxlY3RvcikgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoc2VsZWN0b3Iuc2xpY2UoMSkpIDogdGFnUmUudGVzdChzZWxlY3RvcikgPyBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSA6IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG59IC8vIEByZXF1aXJlIC4vZmluZC50c1xuLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuXG52YXIgQ2FzaCA9XG4vKiogQGNsYXNzICovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhc2goc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIXNlbGVjdG9yKSByZXR1cm47XG4gICAgaWYgKGlzQ2FzaChzZWxlY3RvcikpIHJldHVybiBzZWxlY3RvcjtcbiAgICB2YXIgZWxlcyA9IHNlbGVjdG9yO1xuXG4gICAgaWYgKGlzU3RyaW5nKHNlbGVjdG9yKSkge1xuICAgICAgdmFyIGN0eCA9IChpc0Nhc2goY29udGV4dCkgPyBjb250ZXh0WzBdIDogY29udGV4dCkgfHwgZG9jO1xuICAgICAgZWxlcyA9IGlkUmUudGVzdChzZWxlY3RvcikgPyBjdHguZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3Iuc2xpY2UoMSkpIDogaHRtbFJlLnRlc3Qoc2VsZWN0b3IpID8gcGFyc2VIVE1MKHNlbGVjdG9yKSA6IGZpbmQoc2VsZWN0b3IsIGN0eCk7XG4gICAgICBpZiAoIWVsZXMpIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkeShzZWxlY3Rvcik7IC8vRklYTUU6IGBmbi5yZWFkeWAgaXMgbm90IGluY2x1ZGVkIGluIGBjb3JlYCwgYnV0IGl0J3MgYWN0dWFsbHkgYSBjb3JlIGZ1bmN0aW9uYWxpdHlcbiAgICB9XG5cbiAgICBpZiAoZWxlcy5ub2RlVHlwZSB8fCBlbGVzID09PSB3aW4pIGVsZXMgPSBbZWxlc107XG4gICAgdGhpcy5sZW5ndGggPSBlbGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXNbaV0gPSBlbGVzW2ldO1xuICAgIH1cbiAgfVxuXG4gIENhc2gucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IENhc2goc2VsZWN0b3IsIGNvbnRleHQpO1xuICB9O1xuXG4gIHJldHVybiBDYXNoO1xufSgpO1xuXG52YXIgZm4gPSBDYXNoLnByb3RvdHlwZSxcbiAgICBjYXNoID0gZm4uaW5pdDtcbmNhc2guZm4gPSBjYXNoLnByb3RvdHlwZSA9IGZuOyAvLyBFbnN1cmluZyB0aGF0IGBjYXNoICgpIGluc3RhbmNlb2YgY2FzaGBcblxuZm4ubGVuZ3RoID0gMDtcbmZuLnNwbGljZSA9IHNwbGljZTsgLy8gRW5zdXJpbmcgYSBjYXNoIGNvbGxlY3Rpb24gZ2V0cyBwcmludGVkIGFzIGFycmF5LWxpa2UgaW4gQ2hyb21lJ3MgZGV2dG9vbHNcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gRW5zdXJpbmcgYSBjYXNoIGNvbGxlY3Rpb24gaXMgaXRlcmFibGVcbiAgZm5bU3ltYm9sWydpdGVyYXRvciddXSA9IEFycmF5UHJvdG90eXBlW1N5bWJvbFsnaXRlcmF0b3InXV07XG59XG5cbmZuLm1hcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICByZXR1cm4gY2FzaChjb25jYXQuYXBwbHkoW10sIG1hcC5jYWxsKHRoaXMsIGZ1bmN0aW9uIChlbGUsIGkpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suY2FsbChlbGUsIGksIGVsZSk7XG4gIH0pKSk7XG59O1xuXG5mbi5zbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIHJldHVybiBjYXNoKHNsaWNlLmNhbGwodGhpcywgc3RhcnQsIGVuZCkpO1xufTsgLy8gQHJlcXVpcmUgLi9jYXNoLnRzXG5cblxudmFyIGRhc2hBbHBoYVJlID0gLy0oW2Etel0pL2c7XG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGRhc2hBbHBoYVJlLCBmdW5jdGlvbiAobWF0Y2gsIGxldHRlcikge1xuICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVhY2goYXJyLCBjYWxsYmFjaywgX3JldmVyc2UpIHtcbiAgaWYgKF9yZXZlcnNlKSB7XG4gICAgdmFyIGkgPSBhcnIubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoYXJyW2ldLCBpLCBhcnJbaV0pID09PSBmYWxzZSkgcmV0dXJuIGFycjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoY2FsbGJhY2suY2FsbChhcnJbaV0sIGksIGFycltpXSkgPT09IGZhbHNlKSByZXR1cm4gYXJyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbmNhc2guZWFjaCA9IGVhY2g7XG5cbmZuLmVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGVhY2godGhpcywgY2FsbGJhY2spO1xufTtcblxuZm4ucmVtb3ZlUHJvcCA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIGRlbGV0ZSBlbGVbcHJvcE1hcFtwcm9wXSB8fCBwcm9wXTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0KSB7XG4gIHZhciBvYmpzID0gW107XG5cbiAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICBvYmpzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmICghbGVuZ3RoKSByZXR1cm4ge307XG4gIGlmIChsZW5ndGggPT09IDEpIHJldHVybiBleHRlbmQoY2FzaCwgdGFyZ2V0KTtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jYXNoLmV4dGVuZCA9IGV4dGVuZDtcblxuZm4uZXh0ZW5kID0gZnVuY3Rpb24gKHBsdWdpbnMpIHtcbiAgcmV0dXJuIGV4dGVuZChmbiwgcGx1Z2lucyk7XG59O1xuXG5jYXNoLmd1aWQgPSAxOyAvLyBAcmVxdWlyZSAuL2Nhc2gudHNcblxuZnVuY3Rpb24gbWF0Y2hlcyhlbGUsIHNlbGVjdG9yKSB7XG4gIHZhciBtYXRjaGVzID0gZWxlICYmIChlbGVbJ21hdGNoZXMnXSB8fCBlbGVbJ3dlYmtpdE1hdGNoZXNTZWxlY3RvciddIHx8IGVsZVsnbXNNYXRjaGVzU2VsZWN0b3InXSk7XG4gIHJldHVybiAhIW1hdGNoZXMgJiYgISFzZWxlY3RvciAmJiBtYXRjaGVzLmNhbGwoZWxlLCBzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIGlzQ2FzaCh4KSB7XG4gIHJldHVybiB4IGluc3RhbmNlb2YgQ2FzaDtcbn1cblxuZnVuY3Rpb24gaXNXaW5kb3coeCkge1xuICByZXR1cm4gISF4ICYmIHggPT09IHgud2luZG93O1xufVxuXG5mdW5jdGlvbiBpc0RvY3VtZW50KHgpIHtcbiAgcmV0dXJuICEheCAmJiB4Lm5vZGVUeXBlID09PSA5O1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICByZXR1cm4gISF4ICYmIHgubm9kZVR5cGUgPT09IDE7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoeCkge1xuICByZXR1cm4geCA9PT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc051bGwoeCkge1xuICByZXR1cm4geCA9PT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNOdW1lcmljKHgpIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHgpKSAmJiBpc0Zpbml0ZSh4KTtcbn1cblxuY2FzaC5pc1dpbmRvdyA9IGlzV2luZG93O1xuY2FzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmNhc2guaXNOdW1lcmljID0gaXNOdW1lcmljO1xuY2FzaC5pc0FycmF5ID0gaXNBcnJheTtcblxuZm4ucHJvcCA9IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuICBpZiAoIXByb3ApIHJldHVybjtcblxuICBpZiAoaXNTdHJpbmcocHJvcCkpIHtcbiAgICBwcm9wID0gcHJvcE1hcFtwcm9wXSB8fCBwcm9wO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIHRoaXNbMF0gJiYgdGhpc1swXVtwcm9wXTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgIGVsZVtwcm9wXSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3ApIHtcbiAgICB0aGlzLnByb3Aoa2V5LCBwcm9wW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi5nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGluZGV4KSkgcmV0dXJuIHNsaWNlLmNhbGwodGhpcyk7XG4gIGluZGV4ID0gTnVtYmVyKGluZGV4KTtcbiAgcmV0dXJuIHRoaXNbaW5kZXggPCAwID8gaW5kZXggKyB0aGlzLmxlbmd0aCA6IGluZGV4XTtcbn07XG5cbmZuLmVxID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gIHJldHVybiBjYXNoKHRoaXMuZ2V0KGluZGV4KSk7XG59O1xuXG5mbi5maXJzdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZXEoMCk7XG59O1xuXG5mbi5sYXN0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5lcSgtMSk7XG59OyAvLyBAcmVxdWlyZSAuL21hdGNoZXMudHNcbi8vIEByZXF1aXJlIC4vdHlwZV9jaGVja2luZy50c1xuXG5cbmZ1bmN0aW9uIGdldENvbXBhcmVGdW5jdGlvbihjb21wYXJhdG9yKSB7XG4gIHJldHVybiBpc1N0cmluZyhjb21wYXJhdG9yKSA/IGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICByZXR1cm4gbWF0Y2hlcyhlbGUsIGNvbXBhcmF0b3IpO1xuICB9IDogaXNGdW5jdGlvbihjb21wYXJhdG9yKSA/IGNvbXBhcmF0b3IgOiBpc0Nhc2goY29tcGFyYXRvcikgPyBmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgcmV0dXJuIGNvbXBhcmF0b3IuaXMoZWxlKTtcbiAgfSA6ICFjb21wYXJhdG9yID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSA6IGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICByZXR1cm4gZWxlID09PSBjb21wYXJhdG9yO1xuICB9O1xufVxuXG5mbi5maWx0ZXIgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICB2YXIgY29tcGFyZSA9IGdldENvbXBhcmVGdW5jdGlvbihjb21wYXJhdG9yKTtcbiAgcmV0dXJuIGNhc2goZmlsdGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKGVsZSwgaSkge1xuICAgIHJldHVybiBjb21wYXJlLmNhbGwoZWxlLCBpLCBlbGUpO1xuICB9KSk7XG59OyAvLyBAcmVxdWlyZSBjb2xsZWN0aW9uL2ZpbHRlci50c1xuXG5cbmZ1bmN0aW9uIGZpbHRlcmVkKGNvbGxlY3Rpb24sIGNvbXBhcmF0b3IpIHtcbiAgcmV0dXJuICFjb21wYXJhdG9yID8gY29sbGVjdGlvbiA6IGNvbGxlY3Rpb24uZmlsdGVyKGNvbXBhcmF0b3IpO1xufSAvLyBAcmVxdWlyZSAuL3R5cGVfY2hlY2tpbmcudHNcblxuXG52YXIgc3BsaXRWYWx1ZXNSZSA9IC9cXFMrL2c7XG5cbmZ1bmN0aW9uIGdldFNwbGl0VmFsdWVzKHN0cikge1xuICByZXR1cm4gaXNTdHJpbmcoc3RyKSA/IHN0ci5tYXRjaChzcGxpdFZhbHVlc1JlKSB8fCBbXSA6IFtdO1xufVxuXG5mbi5oYXNDbGFzcyA9IGZ1bmN0aW9uIChjbHMpIHtcbiAgcmV0dXJuICEhY2xzICYmIHNvbWUuY2FsbCh0aGlzLCBmdW5jdGlvbiAoZWxlKSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChlbGUpICYmIGVsZS5jbGFzc0xpc3QuY29udGFpbnMoY2xzKTtcbiAgfSk7XG59O1xuXG5mbi5yZW1vdmVBdHRyID0gZnVuY3Rpb24gKGF0dHIpIHtcbiAgdmFyIGF0dHJzID0gZ2V0U3BsaXRWYWx1ZXMoYXR0cik7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIGlmICghaXNFbGVtZW50KGVsZSkpIHJldHVybjtcbiAgICBlYWNoKGF0dHJzLCBmdW5jdGlvbiAoaSwgYSkge1xuICAgICAgZWxlLnJlbW92ZUF0dHJpYnV0ZShhKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBhdHRyKGF0dHIsIHZhbHVlKSB7XG4gIGlmICghYXR0cikgcmV0dXJuO1xuXG4gIGlmIChpc1N0cmluZyhhdHRyKSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgaWYgKCF0aGlzWzBdIHx8ICFpc0VsZW1lbnQodGhpc1swXSkpIHJldHVybjtcbiAgICAgIHZhciB2YWx1ZV8xID0gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgICByZXR1cm4gaXNOdWxsKHZhbHVlXzEpID8gdW5kZWZpbmVkIDogdmFsdWVfMTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm4gdGhpcztcbiAgICBpZiAoaXNOdWxsKHZhbHVlKSkgcmV0dXJuIHRoaXMucmVtb3ZlQXR0cihhdHRyKTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgIGlmICghaXNFbGVtZW50KGVsZSkpIHJldHVybjtcbiAgICAgIGVsZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGF0dHIpIHtcbiAgICB0aGlzLmF0dHIoa2V5LCBhdHRyW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZuLmF0dHIgPSBhdHRyO1xuXG5mbi50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChjbHMsIGZvcmNlKSB7XG4gIHZhciBjbGFzc2VzID0gZ2V0U3BsaXRWYWx1ZXMoY2xzKSxcbiAgICAgIGlzRm9yY2UgPSAhaXNVbmRlZmluZWQoZm9yY2UpO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbGUpKSByZXR1cm47XG4gICAgZWFjaChjbGFzc2VzLCBmdW5jdGlvbiAoaSwgYykge1xuICAgICAgaWYgKGlzRm9yY2UpIHtcbiAgICAgICAgZm9yY2UgPyBlbGUuY2xhc3NMaXN0LmFkZChjKSA6IGVsZS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlLmNsYXNzTGlzdC50b2dnbGUoYyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZm4uYWRkQ2xhc3MgPSBmdW5jdGlvbiAoY2xzKSB7XG4gIHJldHVybiB0aGlzLnRvZ2dsZUNsYXNzKGNscywgdHJ1ZSk7XG59O1xuXG5mbi5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbHMpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLnRvZ2dsZUNsYXNzKGNscywgZmFsc2UpO1xuICByZXR1cm4gdGhpcy5hdHRyKCdjbGFzcycsICcnKTtcbn07XG5cbmZ1bmN0aW9uIHBsdWNrKGFyciwgcHJvcCwgZGVlcCwgdW50aWwpIHtcbiAgdmFyIHBsdWNrZWQgPSBbXSxcbiAgICAgIGlzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKHByb3ApLFxuICAgICAgY29tcGFyZSA9IHVudGlsICYmIGdldENvbXBhcmVGdW5jdGlvbih1bnRpbCk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzQ2FsbGJhY2spIHtcbiAgICAgIHZhciB2YWxfMSA9IHByb3AoYXJyW2ldKTtcbiAgICAgIGlmICh2YWxfMS5sZW5ndGgpIHB1c2guYXBwbHkocGx1Y2tlZCwgdmFsXzEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmFsXzIgPSBhcnJbaV1bcHJvcF07XG5cbiAgICAgIHdoaWxlICh2YWxfMiAhPSBudWxsKSB7XG4gICAgICAgIGlmICh1bnRpbCAmJiBjb21wYXJlKC0xLCB2YWxfMikpIGJyZWFrO1xuICAgICAgICBwbHVja2VkLnB1c2godmFsXzIpO1xuICAgICAgICB2YWxfMiA9IGRlZXAgPyB2YWxfMltwcm9wXSA6IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsdWNrZWQ7XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZShhcnIpIHtcbiAgcmV0dXJuIGFyci5sZW5ndGggPiAxID8gZmlsdGVyLmNhbGwoYXJyLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgsIHNlbGYpIHtcbiAgICByZXR1cm4gaW5kZXhPZi5jYWxsKHNlbGYsIGl0ZW0pID09PSBpbmRleDtcbiAgfSkgOiBhcnI7XG59XG5cbmNhc2gudW5pcXVlID0gdW5pcXVlO1xuXG5mbi5hZGQgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGNhc2godW5pcXVlKHRoaXMuZ2V0KCkuY29uY2F0KGNhc2goc2VsZWN0b3IsIGNvbnRleHQpLmdldCgpKSkpO1xufTsgLy8gQHJlcXVpcmUgY29yZS90eXBlX2NoZWNraW5nLnRzXG4vLyBAcmVxdWlyZSBjb3JlL3ZhcmlhYmxlcy50c1xuXG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShlbGUsIHByb3AsIGlzVmFyaWFibGUpIHtcbiAgaWYgKCFpc0VsZW1lbnQoZWxlKSkgcmV0dXJuO1xuICB2YXIgc3R5bGUgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGUsIG51bGwpO1xuICByZXR1cm4gaXNWYXJpYWJsZSA/IHN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCkgfHwgdW5kZWZpbmVkIDogc3R5bGVbcHJvcF0gfHwgZWxlLnN0eWxlW3Byb3BdO1xufSAvLyBAcmVxdWlyZSAuL2NvbXB1dGVfc3R5bGUudHNcblxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVJbnQoZWxlLCBwcm9wKSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlU3R5bGUoZWxlLCBwcm9wKSwgMTApIHx8IDA7XG59XG5cbnZhciBjc3NWYXJpYWJsZVJlID0gL14tLS87IC8vIEByZXF1aXJlIC4vdmFyaWFibGVzLnRzXG5cbmZ1bmN0aW9uIGlzQ1NTVmFyaWFibGUocHJvcCkge1xuICByZXR1cm4gY3NzVmFyaWFibGVSZS50ZXN0KHByb3ApO1xufSAvLyBAcmVxdWlyZSBjb3JlL2NhbWVsX2Nhc2UudHNcbi8vIEByZXF1aXJlIGNvcmUvY2FzaC50c1xuLy8gQHJlcXVpcmUgY29yZS9lYWNoLnRzXG4vLyBAcmVxdWlyZSBjb3JlL3ZhcmlhYmxlcy50c1xuLy8gQHJlcXVpcmUgLi9pc19jc3NfdmFyaWFibGUudHNcblxuXG52YXIgcHJlZml4ZWRQcm9wcyA9IHt9LFxuICAgIHN0eWxlID0gZGl2LnN0eWxlLFxuICAgIHZlbmRvcnNQcmVmaXhlcyA9IFsnd2Via2l0JywgJ21veicsICdtcyddO1xuXG5mdW5jdGlvbiBnZXRQcmVmaXhlZFByb3AocHJvcCwgaXNWYXJpYWJsZSkge1xuICBpZiAoaXNWYXJpYWJsZSA9PT0gdm9pZCAwKSB7XG4gICAgaXNWYXJpYWJsZSA9IGlzQ1NTVmFyaWFibGUocHJvcCk7XG4gIH1cblxuICBpZiAoaXNWYXJpYWJsZSkgcmV0dXJuIHByb3A7XG5cbiAgaWYgKCFwcmVmaXhlZFByb3BzW3Byb3BdKSB7XG4gICAgdmFyIHByb3BDQyA9IGNhbWVsQ2FzZShwcm9wKSxcbiAgICAgICAgcHJvcFVDID0gXCJcIiArIHByb3BDQ1swXS50b1VwcGVyQ2FzZSgpICsgcHJvcENDLnNsaWNlKDEpLFxuICAgICAgICBwcm9wcyA9IChwcm9wQ0MgKyBcIiBcIiArIHZlbmRvcnNQcmVmaXhlcy5qb2luKHByb3BVQyArIFwiIFwiKSArIHByb3BVQykuc3BsaXQoJyAnKTtcbiAgICBlYWNoKHByb3BzLCBmdW5jdGlvbiAoaSwgcCkge1xuICAgICAgaWYgKHAgaW4gc3R5bGUpIHtcbiAgICAgICAgcHJlZml4ZWRQcm9wc1twcm9wXSA9IHA7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcmVmaXhlZFByb3BzW3Byb3BdO1xufVxuXG47IC8vIEByZXF1aXJlIGNvcmUvdHlwZV9jaGVja2luZy50c1xuLy8gQHJlcXVpcmUgLi9pc19jc3NfdmFyaWFibGUudHNcblxudmFyIG51bWVyaWNQcm9wcyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgZ3JpZEFyZWE6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGdyaWRDb2x1bW5FbmQ6IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd0VuZDogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGdldFN1ZmZpeGVkVmFsdWUocHJvcCwgdmFsdWUsIGlzVmFyaWFibGUpIHtcbiAgaWYgKGlzVmFyaWFibGUgPT09IHZvaWQgMCkge1xuICAgIGlzVmFyaWFibGUgPSBpc0NTU1ZhcmlhYmxlKHByb3ApO1xuICB9XG5cbiAgcmV0dXJuICFpc1ZhcmlhYmxlICYmICFudW1lcmljUHJvcHNbcHJvcF0gJiYgaXNOdW1lcmljKHZhbHVlKSA/IHZhbHVlICsgXCJweFwiIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNzcyhwcm9wLCB2YWx1ZSkge1xuICBpZiAoaXNTdHJpbmcocHJvcCkpIHtcbiAgICB2YXIgaXNWYXJpYWJsZV8xID0gaXNDU1NWYXJpYWJsZShwcm9wKTtcbiAgICBwcm9wID0gZ2V0UHJlZml4ZWRQcm9wKHByb3AsIGlzVmFyaWFibGVfMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpc1swXSAmJiBjb21wdXRlU3R5bGUodGhpc1swXSwgcHJvcCwgaXNWYXJpYWJsZV8xKTtcbiAgICBpZiAoIXByb3ApIHJldHVybiB0aGlzO1xuICAgIHZhbHVlID0gZ2V0U3VmZml4ZWRWYWx1ZShwcm9wLCB2YWx1ZSwgaXNWYXJpYWJsZV8xKTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgIGlmICghaXNFbGVtZW50KGVsZSkpIHJldHVybjtcblxuICAgICAgaWYgKGlzVmFyaWFibGVfMSkge1xuICAgICAgICBlbGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlLnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcCkge1xuICAgIHRoaXMuY3NzKGtleSwgcHJvcFtrZXldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG47XG5mbi5jc3MgPSBjc3M7IC8vIEBvcHRpb25hbCAuL2Nzcy50c1xuLy8gQHJlcXVpcmUgY29yZS9hdHRlbXB0LnRzXG4vLyBAcmVxdWlyZSBjb3JlL2NhbWVsX2Nhc2UudHNcblxudmFyIEpTT05TdHJpbmdSZSA9IC9eXFxzK3xcXHMrJC87XG5cbmZ1bmN0aW9uIGdldERhdGEoZWxlLCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZWxlLmRhdGFzZXRba2V5XSB8fCBlbGUuZGF0YXNldFtjYW1lbENhc2Uoa2V5KV07XG4gIGlmIChKU09OU3RyaW5nUmUudGVzdCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgcmV0dXJuIGF0dGVtcHQoSlNPTi5wYXJzZSwgdmFsdWUpO1xufSAvLyBAcmVxdWlyZSBjb3JlL2F0dGVtcHQudHNcbi8vIEByZXF1aXJlIGNvcmUvY2FtZWxfY2FzZS50c1xuXG5cbmZ1bmN0aW9uIHNldERhdGEoZWxlLCBrZXksIHZhbHVlKSB7XG4gIHZhbHVlID0gYXR0ZW1wdChKU09OLnN0cmluZ2lmeSwgdmFsdWUpO1xuICBlbGUuZGF0YXNldFtjYW1lbENhc2Uoa2V5KV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGF0YShuYW1lLCB2YWx1ZSkge1xuICBpZiAoIW5hbWUpIHtcbiAgICBpZiAoIXRoaXNbMF0pIHJldHVybjtcbiAgICB2YXIgZGF0YXMgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzWzBdLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzW2tleV0gPSBnZXREYXRhKHRoaXNbMF0sIGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGFzO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gdGhpc1swXSAmJiBnZXREYXRhKHRoaXNbMF0sIG5hbWUpO1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybiB0aGlzO1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgICAgc2V0RGF0YShlbGUsIG5hbWUsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBuYW1lKSB7XG4gICAgdGhpcy5kYXRhKGtleSwgbmFtZVtrZXldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mbi5kYXRhID0gZGF0YTsgLy8gQG9wdGlvbmFsIC4vZGF0YS50c1xuXG5mdW5jdGlvbiBnZXREb2N1bWVudERpbWVuc2lvbihkb2MsIGRpbWVuc2lvbikge1xuICB2YXIgZG9jRWxlID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgcmV0dXJuIE1hdGgubWF4KGRvYy5ib2R5W1wic2Nyb2xsXCIgKyBkaW1lbnNpb25dLCBkb2NFbGVbXCJzY3JvbGxcIiArIGRpbWVuc2lvbl0sIGRvYy5ib2R5W1wib2Zmc2V0XCIgKyBkaW1lbnNpb25dLCBkb2NFbGVbXCJvZmZzZXRcIiArIGRpbWVuc2lvbl0sIGRvY0VsZVtcImNsaWVudFwiICsgZGltZW5zaW9uXSk7XG59IC8vIEByZXF1aXJlIGNzcy9oZWxwZXJzL2NvbXB1dGVfc3R5bGVfaW50LnRzXG5cblxuZnVuY3Rpb24gZ2V0RXh0cmFTcGFjZShlbGUsIHhBeGlzKSB7XG4gIHJldHVybiBjb21wdXRlU3R5bGVJbnQoZWxlLCBcImJvcmRlclwiICsgKHhBeGlzID8gJ0xlZnQnIDogJ1RvcCcpICsgXCJXaWR0aFwiKSArIGNvbXB1dGVTdHlsZUludChlbGUsIFwicGFkZGluZ1wiICsgKHhBeGlzID8gJ0xlZnQnIDogJ1RvcCcpKSArIGNvbXB1dGVTdHlsZUludChlbGUsIFwicGFkZGluZ1wiICsgKHhBeGlzID8gJ1JpZ2h0JyA6ICdCb3R0b20nKSkgKyBjb21wdXRlU3R5bGVJbnQoZWxlLCBcImJvcmRlclwiICsgKHhBeGlzID8gJ1JpZ2h0JyA6ICdCb3R0b20nKSArIFwiV2lkdGhcIik7XG59XG5cbmVhY2goW3RydWUsIGZhbHNlXSwgZnVuY3Rpb24gKGksIG91dGVyKSB7XG4gIGVhY2goWydXaWR0aCcsICdIZWlnaHQnXSwgZnVuY3Rpb24gKGksIHByb3ApIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIgKyAob3V0ZXIgPyAnb3V0ZXInIDogJ2lubmVyJykgKyBwcm9wO1xuXG4gICAgZm5bbmFtZV0gPSBmdW5jdGlvbiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIGlmICghdGhpc1swXSkgcmV0dXJuO1xuICAgICAgaWYgKGlzV2luZG93KHRoaXNbMF0pKSByZXR1cm4gb3V0ZXIgPyB0aGlzWzBdW1wiaW5uZXJcIiArIHByb3BdIDogdGhpc1swXS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIHByb3BdO1xuICAgICAgaWYgKGlzRG9jdW1lbnQodGhpc1swXSkpIHJldHVybiBnZXREb2N1bWVudERpbWVuc2lvbih0aGlzWzBdLCBwcm9wKTtcbiAgICAgIHJldHVybiB0aGlzWzBdW1wiXCIgKyAob3V0ZXIgPyAnb2Zmc2V0JyA6ICdjbGllbnQnKSArIHByb3BdICsgKGluY2x1ZGVNYXJnaW5zICYmIG91dGVyID8gY29tcHV0ZVN0eWxlSW50KHRoaXNbMF0sIFwibWFyZ2luXCIgKyAoaSA/ICdUb3AnIDogJ0xlZnQnKSkgKyBjb21wdXRlU3R5bGVJbnQodGhpc1swXSwgXCJtYXJnaW5cIiArIChpID8gJ0JvdHRvbScgOiAnUmlnaHQnKSkgOiAwKTtcbiAgICB9O1xuICB9KTtcbn0pO1xuZWFjaChbJ1dpZHRoJywgJ0hlaWdodCddLCBmdW5jdGlvbiAoaW5kZXgsIHByb3ApIHtcbiAgdmFyIHByb3BMQyA9IHByb3AudG9Mb3dlckNhc2UoKTtcblxuICBmbltwcm9wTENdID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzWzBdKSByZXR1cm4gaXNVbmRlZmluZWQodmFsdWUpID8gdW5kZWZpbmVkIDogdGhpcztcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgaWYgKGlzV2luZG93KHRoaXNbMF0pKSByZXR1cm4gdGhpc1swXS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIiArIHByb3BdO1xuICAgICAgaWYgKGlzRG9jdW1lbnQodGhpc1swXSkpIHJldHVybiBnZXREb2N1bWVudERpbWVuc2lvbih0aGlzWzBdLCBwcm9wKTtcbiAgICAgIHJldHVybiB0aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3Byb3BMQ10gLSBnZXRFeHRyYVNwYWNlKHRoaXNbMF0sICFpbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlTnVtYmVyID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgIGlmICghaXNFbGVtZW50KGVsZSkpIHJldHVybjtcbiAgICAgIHZhciBib3hTaXppbmcgPSBjb21wdXRlU3R5bGUoZWxlLCAnYm94U2l6aW5nJyk7XG4gICAgICBlbGUuc3R5bGVbcHJvcExDXSA9IGdldFN1ZmZpeGVkVmFsdWUocHJvcExDLCB2YWx1ZU51bWJlciArIChib3hTaXppbmcgPT09ICdib3JkZXItYm94JyA/IGdldEV4dHJhU3BhY2UoZWxlLCAhaW5kZXgpIDogMCkpO1xuICAgIH0pO1xuICB9O1xufSk7IC8vIEBvcHRpb25hbCAuL2lubmVyX291dGVyLnRzXG4vLyBAb3B0aW9uYWwgLi9ub3JtYWwudHNcbi8vIEByZXF1aXJlIGNzcy9oZWxwZXJzL2NvbXB1dGVfc3R5bGUudHNcblxudmFyIGRlZmF1bHREaXNwbGF5ID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KHRhZ05hbWUpIHtcbiAgaWYgKGRlZmF1bHREaXNwbGF5W3RhZ05hbWVdKSByZXR1cm4gZGVmYXVsdERpc3BsYXlbdGFnTmFtZV07XG4gIHZhciBlbGUgPSBjcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBkb2MuYm9keS5pbnNlcnRCZWZvcmUoZWxlLCBudWxsKTtcbiAgdmFyIGRpc3BsYXkgPSBjb21wdXRlU3R5bGUoZWxlLCAnZGlzcGxheScpO1xuICBkb2MuYm9keS5yZW1vdmVDaGlsZChlbGUpO1xuICByZXR1cm4gZGVmYXVsdERpc3BsYXlbdGFnTmFtZV0gPSBkaXNwbGF5ICE9PSAnbm9uZScgPyBkaXNwbGF5IDogJ2Jsb2NrJztcbn0gLy8gQHJlcXVpcmUgY3NzL2hlbHBlcnMvY29tcHV0ZV9zdHlsZS50c1xuXG5cbmZ1bmN0aW9uIGlzSGlkZGVuKGVsZSkge1xuICByZXR1cm4gY29tcHV0ZVN0eWxlKGVsZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnO1xufVxuXG52YXIgZGlzcGxheVByb3BlcnR5ID0gJ19fX2NkJztcblxuZm4udG9nZ2xlID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIGlmICghaXNFbGVtZW50KGVsZSkpIHJldHVybjtcbiAgICB2YXIgc2hvdyA9IGlzVW5kZWZpbmVkKGZvcmNlKSA/IGlzSGlkZGVuKGVsZSkgOiBmb3JjZTtcblxuICAgIGlmIChzaG93KSB7XG4gICAgICBlbGUuc3R5bGUuZGlzcGxheSA9IGVsZVtkaXNwbGF5UHJvcGVydHldIHx8ICcnO1xuXG4gICAgICBpZiAoaXNIaWRkZW4oZWxlKSkge1xuICAgICAgICBlbGUuc3R5bGUuZGlzcGxheSA9IGdldERlZmF1bHREaXNwbGF5KGVsZS50YWdOYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxlW2Rpc3BsYXlQcm9wZXJ0eV0gPSBjb21wdXRlU3R5bGUoZWxlLCAnZGlzcGxheScpO1xuICAgICAgZWxlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICB9KTtcbn07XG5cbmZuLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnRvZ2dsZShmYWxzZSk7XG59O1xuXG5mbi5zaG93ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50b2dnbGUodHJ1ZSk7XG59OyAvLyBAb3B0aW9uYWwgLi9oaWRlLnRzXG4vLyBAb3B0aW9uYWwgLi9zaG93LnRzXG4vLyBAb3B0aW9uYWwgLi90b2dnbGUudHNcblxuXG5mdW5jdGlvbiBoYXNOYW1lc3BhY2VzKG5zMSwgbnMyKSB7XG4gIHJldHVybiAhbnMyIHx8ICFzb21lLmNhbGwobnMyLCBmdW5jdGlvbiAobnMpIHtcbiAgICByZXR1cm4gbnMxLmluZGV4T2YobnMpIDwgMDtcbiAgfSk7XG59XG5cbnZhciBldmVudHNOYW1lc3BhY2UgPSAnX19fY2UnLFxuICAgIGV2ZW50c05hbWVzcGFjZXNTZXBhcmF0b3IgPSAnLicsXG4gICAgZXZlbnRzRm9jdXMgPSB7XG4gIGZvY3VzOiAnZm9jdXNpbicsXG4gIGJsdXI6ICdmb2N1c291dCdcbn0sXG4gICAgZXZlbnRzSG92ZXIgPSB7XG4gIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICBtb3VzZWxlYXZlOiAnbW91c2VvdXQnXG59LFxuICAgIGV2ZW50c01vdXNlUmUgPSAvXihtb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcHxjbGlja3xkYmxjbGljaykvaTsgLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuZnVuY3Rpb24gZ2V0RXZlbnROYW1lQnViYmxpbmcobmFtZSkge1xuICByZXR1cm4gZXZlbnRzSG92ZXJbbmFtZV0gfHwgZXZlbnRzRm9jdXNbbmFtZV0gfHwgbmFtZTtcbn0gLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuXG5mdW5jdGlvbiBnZXRFdmVudHNDYWNoZShlbGUpIHtcbiAgcmV0dXJuIGVsZVtldmVudHNOYW1lc3BhY2VdID0gZWxlW2V2ZW50c05hbWVzcGFjZV0gfHwge307XG59IC8vIEByZXF1aXJlIGNvcmUvZ3VpZC50c1xuLy8gQHJlcXVpcmUgZXZlbnRzL2hlbHBlcnMvZ2V0X2V2ZW50c19jYWNoZS50c1xuXG5cbmZ1bmN0aW9uIGFkZEV2ZW50KGVsZSwgbmFtZSwgbmFtZXNwYWNlcywgc2VsZWN0b3IsIGNhbGxiYWNrKSB7XG4gIHZhciBldmVudENhY2hlID0gZ2V0RXZlbnRzQ2FjaGUoZWxlKTtcbiAgZXZlbnRDYWNoZVtuYW1lXSA9IGV2ZW50Q2FjaGVbbmFtZV0gfHwgW107XG4gIGV2ZW50Q2FjaGVbbmFtZV0ucHVzaChbbmFtZXNwYWNlcywgc2VsZWN0b3IsIGNhbGxiYWNrXSk7XG4gIGVsZS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGNhbGxiYWNrKTtcbn0gLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuXG5mdW5jdGlvbiBwYXJzZUV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgdmFyIHBhcnRzID0gZXZlbnROYW1lLnNwbGl0KGV2ZW50c05hbWVzcGFjZXNTZXBhcmF0b3IpO1xuICByZXR1cm4gW3BhcnRzWzBdLCBwYXJ0cy5zbGljZSgxKS5zb3J0KCldOyAvLyBbbmFtZSwgbmFtZXNwYWNlW11dXG59IC8vIEByZXF1aXJlIC4vZ2V0X2V2ZW50c19jYWNoZS50c1xuLy8gQHJlcXVpcmUgLi9oYXNfbmFtZXNwYWNlcy50c1xuLy8gQHJlcXVpcmUgLi9wYXJzZV9ldmVudF9uYW1lLnRzXG5cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZWxlLCBuYW1lLCBuYW1lc3BhY2VzLCBzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0gZ2V0RXZlbnRzQ2FjaGUoZWxlKTtcblxuICBpZiAoIW5hbWUpIHtcbiAgICBmb3IgKG5hbWUgaW4gY2FjaGUpIHtcbiAgICAgIHJlbW92ZUV2ZW50KGVsZSwgbmFtZSwgbmFtZXNwYWNlcywgc2VsZWN0b3IsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2FjaGVbbmFtZV0pIHtcbiAgICBjYWNoZVtuYW1lXSA9IGNhY2hlW25hbWVdLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgIHZhciBucyA9IF9hWzBdLFxuICAgICAgICAgIHNlbCA9IF9hWzFdLFxuICAgICAgICAgIGNiID0gX2FbMl07XG4gICAgICBpZiAoY2FsbGJhY2sgJiYgY2IuZ3VpZCAhPT0gY2FsbGJhY2suZ3VpZCB8fCAhaGFzTmFtZXNwYWNlcyhucywgbmFtZXNwYWNlcykgfHwgc2VsZWN0b3IgJiYgc2VsZWN0b3IgIT09IHNlbCkgcmV0dXJuIHRydWU7XG4gICAgICBlbGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBjYik7XG4gICAgfSk7XG4gIH1cbn1cblxuZm4ub2ZmID0gZnVuY3Rpb24gKGV2ZW50RnVsbE5hbWUsIHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmIChpc1VuZGVmaW5lZChldmVudEZ1bGxOYW1lKSkge1xuICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgICBpZiAoIWlzRWxlbWVudChlbGUpICYmICFpc0RvY3VtZW50KGVsZSkgJiYgIWlzV2luZG93KGVsZSkpIHJldHVybjtcbiAgICAgIHJlbW92ZUV2ZW50KGVsZSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoIWlzU3RyaW5nKGV2ZW50RnVsbE5hbWUpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGV2ZW50RnVsbE5hbWUpIHtcbiAgICAgIHRoaXMub2ZmKGtleSwgZXZlbnRGdWxsTmFtZVtrZXldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpKSB7XG4gICAgICBjYWxsYmFjayA9IHNlbGVjdG9yO1xuICAgICAgc2VsZWN0b3IgPSAnJztcbiAgICB9XG5cbiAgICBlYWNoKGdldFNwbGl0VmFsdWVzKGV2ZW50RnVsbE5hbWUpLCBmdW5jdGlvbiAoaSwgZXZlbnRGdWxsTmFtZSkge1xuICAgICAgdmFyIF9hID0gcGFyc2VFdmVudE5hbWUoZXZlbnRGdWxsTmFtZSksXG4gICAgICAgICAgbmFtZU9yaWdpbmFsID0gX2FbMF0sXG4gICAgICAgICAgbmFtZXNwYWNlcyA9IF9hWzFdLFxuICAgICAgICAgIG5hbWUgPSBnZXRFdmVudE5hbWVCdWJibGluZyhuYW1lT3JpZ2luYWwpO1xuXG4gICAgICBfdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgICAgaWYgKCFpc0VsZW1lbnQoZWxlKSAmJiAhaXNEb2N1bWVudChlbGUpICYmICFpc1dpbmRvdyhlbGUpKSByZXR1cm47XG4gICAgICAgIHJlbW92ZUV2ZW50KGVsZSwgbmFtZSwgbmFtZXNwYWNlcywgc2VsZWN0b3IsIGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBvbihldmVudEZ1bGxOYW1lLCBzZWxlY3RvciwgZGF0YSwgY2FsbGJhY2ssIF9vbmUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoIWlzU3RyaW5nKGV2ZW50RnVsbE5hbWUpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGV2ZW50RnVsbE5hbWUpIHtcbiAgICAgIHRoaXMub24oa2V5LCBzZWxlY3RvciwgZGF0YSwgZXZlbnRGdWxsTmFtZVtrZXldLCBfb25lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGlmICghaXNTdHJpbmcoc2VsZWN0b3IpKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHNlbGVjdG9yKSB8fCBpc051bGwoc2VsZWN0b3IpKSB7XG4gICAgICBzZWxlY3RvciA9ICcnO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBzZWxlY3RvcjtcbiAgICAgIHNlbGVjdG9yID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICAgIGRhdGEgPSBzZWxlY3RvcjtcbiAgICAgIHNlbGVjdG9yID0gJyc7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgIGNhbGxiYWNrID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gIGVhY2goZ2V0U3BsaXRWYWx1ZXMoZXZlbnRGdWxsTmFtZSksIGZ1bmN0aW9uIChpLCBldmVudEZ1bGxOYW1lKSB7XG4gICAgdmFyIF9hID0gcGFyc2VFdmVudE5hbWUoZXZlbnRGdWxsTmFtZSksXG4gICAgICAgIG5hbWVPcmlnaW5hbCA9IF9hWzBdLFxuICAgICAgICBuYW1lc3BhY2VzID0gX2FbMV0sXG4gICAgICAgIG5hbWUgPSBnZXRFdmVudE5hbWVCdWJibGluZyhuYW1lT3JpZ2luYWwpLFxuICAgICAgICBpc0V2ZW50SG92ZXIgPSBuYW1lT3JpZ2luYWwgaW4gZXZlbnRzSG92ZXIsXG4gICAgICAgIGlzRXZlbnRGb2N1cyA9IG5hbWVPcmlnaW5hbCBpbiBldmVudHNGb2N1cztcblxuICAgIGlmICghbmFtZSkgcmV0dXJuO1xuXG4gICAgX3RoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgICBpZiAoIWlzRWxlbWVudChlbGUpICYmICFpc0RvY3VtZW50KGVsZSkgJiYgIWlzV2luZG93KGVsZSkpIHJldHVybjtcblxuICAgICAgdmFyIGZpbmFsQ2FsbGJhY2sgPSBmdW5jdGlvbiBmaW5hbENhbGxiYWNrKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXRbXCJfX19pXCIgKyBldmVudC50eXBlXSkgcmV0dXJuIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpOyAvLyBJZ25vcmluZyBuYXRpdmUgZXZlbnQgaW4gZmF2b3Igb2YgdGhlIHVwY29taW5nIGN1c3RvbSBvbmVcblxuICAgICAgICBpZiAoZXZlbnQubmFtZXNwYWNlICYmICFoYXNOYW1lc3BhY2VzKG5hbWVzcGFjZXMsIGV2ZW50Lm5hbWVzcGFjZS5zcGxpdChldmVudHNOYW1lc3BhY2VzU2VwYXJhdG9yKSkpIHJldHVybjtcbiAgICAgICAgaWYgKCFzZWxlY3RvciAmJiAoaXNFdmVudEZvY3VzICYmIChldmVudC50YXJnZXQgIT09IGVsZSB8fCBldmVudC5fX19vdCA9PT0gbmFtZSkgfHwgaXNFdmVudEhvdmVyICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgZWxlLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSkgcmV0dXJuO1xuICAgICAgICB2YXIgdGhpc0FyZyA9IGVsZTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgd2hpbGUgKCFtYXRjaGVzKHRhcmdldCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBlbGUpIHJldHVybjtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzQXJnID0gdGFyZ2V0O1xuICAgICAgICAgIGV2ZW50Ll9fX2NkID0gdHJ1ZTsgLy8gRGVsZWdhdGVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5fX19jZCkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgJ2N1cnJlbnRUYXJnZXQnLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNBcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICdkYXRhJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrLmNhbGwodGhpc0FyZywgZXZlbnQsIGV2ZW50Ll9fX3RkKTtcblxuICAgICAgICBpZiAoX29uZSkge1xuICAgICAgICAgIHJlbW92ZUV2ZW50KGVsZSwgbmFtZSwgbmFtZXNwYWNlcywgc2VsZWN0b3IsIGZpbmFsQ2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJldHVyblZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZpbmFsQ2FsbGJhY2suZ3VpZCA9IGNhbGxiYWNrLmd1aWQgPSBjYWxsYmFjay5ndWlkIHx8IGNhc2guZ3VpZCsrO1xuICAgICAgYWRkRXZlbnQoZWxlLCBuYW1lLCBuYW1lc3BhY2VzLCBzZWxlY3RvciwgZmluYWxDYWxsYmFjayk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZm4ub24gPSBvbjtcblxuZnVuY3Rpb24gb25lKGV2ZW50RnVsbE5hbWUsIHNlbGVjdG9yLCBkYXRhLCBjYWxsYmFjaykge1xuICByZXR1cm4gdGhpcy5vbihldmVudEZ1bGxOYW1lLCBzZWxlY3RvciwgZGF0YSwgY2FsbGJhY2ssIHRydWUpO1xufVxuXG47XG5mbi5vbmUgPSBvbmU7XG5cbmZuLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBjYiA9IGZ1bmN0aW9uIGNiKCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwLCBjYXNoKTtcbiAgfTtcblxuICBpZiAoZG9jLnJlYWR5U3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbmZuLnRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcbiAgaWYgKGlzU3RyaW5nKGV2ZW50KSkge1xuICAgIHZhciBfYSA9IHBhcnNlRXZlbnROYW1lKGV2ZW50KSxcbiAgICAgICAgbmFtZU9yaWdpbmFsID0gX2FbMF0sXG4gICAgICAgIG5hbWVzcGFjZXMgPSBfYVsxXSxcbiAgICAgICAgbmFtZV8xID0gZ2V0RXZlbnROYW1lQnViYmxpbmcobmFtZU9yaWdpbmFsKTtcblxuICAgIGlmICghbmFtZV8xKSByZXR1cm4gdGhpcztcbiAgICB2YXIgdHlwZSA9IGV2ZW50c01vdXNlUmUudGVzdChuYW1lXzEpID8gJ01vdXNlRXZlbnRzJyA6ICdIVE1MRXZlbnRzJztcbiAgICBldmVudCA9IGRvYy5jcmVhdGVFdmVudCh0eXBlKTtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZV8xLCB0cnVlLCB0cnVlKTtcbiAgICBldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oZXZlbnRzTmFtZXNwYWNlc1NlcGFyYXRvcik7XG4gICAgZXZlbnQuX19fb3QgPSBuYW1lT3JpZ2luYWw7XG4gIH1cblxuICBldmVudC5fX190ZCA9IGRhdGE7XG4gIHZhciBpc0V2ZW50Rm9jdXMgPSBldmVudC5fX19vdCBpbiBldmVudHNGb2N1cztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgaWYgKGlzRXZlbnRGb2N1cyAmJiBpc0Z1bmN0aW9uKGVsZVtldmVudC5fX19vdF0pKSB7XG4gICAgICBlbGVbXCJfX19pXCIgKyBldmVudC50eXBlXSA9IHRydWU7IC8vIEVuc3VyaW5nIHRoZSBuYXRpdmUgZXZlbnQgaXMgaWdub3JlZFxuXG4gICAgICBlbGVbZXZlbnQuX19fb3RdKCk7XG5cbiAgICAgIGVsZVtcIl9fX2lcIiArIGV2ZW50LnR5cGVdID0gZmFsc2U7IC8vIEVuc3VyaW5nIHRoZSBjdXN0b20gZXZlbnQgaXMgbm90IGlnbm9yZWRcbiAgICB9XG5cbiAgICBlbGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0pO1xufTsgLy8gQG9wdGlvbmFsIC4vb2ZmLnRzXG4vLyBAb3B0aW9uYWwgLi9vbi50c1xuLy8gQG9wdGlvbmFsIC4vb25lLnRzXG4vLyBAb3B0aW9uYWwgLi9yZWFkeS50c1xuLy8gQG9wdGlvbmFsIC4vdHJpZ2dlci50c1xuLy8gQHJlcXVpcmUgY29yZS9wbHVjay50c1xuLy8gQHJlcXVpcmUgY29yZS92YXJpYWJsZXMudHNcblxuXG5mdW5jdGlvbiBnZXRWYWx1ZShlbGUpIHtcbiAgaWYgKGVsZS5tdWx0aXBsZSAmJiBlbGUub3B0aW9ucykgcmV0dXJuIHBsdWNrKGZpbHRlci5jYWxsKGVsZS5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgcmV0dXJuIG9wdGlvbi5zZWxlY3RlZCAmJiAhb3B0aW9uLmRpc2FibGVkICYmICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZDtcbiAgfSksICd2YWx1ZScpO1xuICByZXR1cm4gZWxlLnZhbHVlIHx8ICcnO1xufVxuXG52YXIgcXVlcnlFbmNvZGVTcGFjZVJlID0gLyUyMC9nLFxuICAgIHF1ZXJ5RW5jb2RlQ1JMRlJlID0gL1xccj9cXG4vZztcblxuZnVuY3Rpb24gcXVlcnlFbmNvZGUocHJvcCwgdmFsdWUpIHtcbiAgcmV0dXJuIFwiJlwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHByb3ApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUucmVwbGFjZShxdWVyeUVuY29kZUNSTEZSZSwgJ1xcclxcbicpKS5yZXBsYWNlKHF1ZXJ5RW5jb2RlU3BhY2VSZSwgJysnKTtcbn1cblxudmFyIHNraXBwYWJsZVJlID0gL2ZpbGV8cmVzZXR8c3VibWl0fGJ1dHRvbnxpbWFnZS9pLFxuICAgIGNoZWNrYWJsZVJlID0gL3JhZGlvfGNoZWNrYm94L2k7XG5cbmZuLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gJyc7XG4gIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgZWFjaChlbGUuZWxlbWVudHMgfHwgW2VsZV0sIGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICAgIGlmIChlbGUuZGlzYWJsZWQgfHwgIWVsZS5uYW1lIHx8IGVsZS50YWdOYW1lID09PSAnRklFTERTRVQnIHx8IHNraXBwYWJsZVJlLnRlc3QoZWxlLnR5cGUpIHx8IGNoZWNrYWJsZVJlLnRlc3QoZWxlLnR5cGUpICYmICFlbGUuY2hlY2tlZCkgcmV0dXJuO1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUoZWxlKTtcblxuICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgICAgICBlYWNoKHZhbHVlcywgZnVuY3Rpb24gKGksIHZhbHVlKSB7XG4gICAgICAgICAgcXVlcnkgKz0gcXVlcnlFbmNvZGUoZWxlLm5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcXVlcnkuc2xpY2UoMSk7XG59O1xuXG5mdW5jdGlvbiB2YWwodmFsdWUpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpc1swXSAmJiBnZXRWYWx1ZSh0aGlzWzBdKTtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgdmFyIGlzU2VsZWN0ID0gZWxlLm11bHRpcGxlICYmIGVsZS5vcHRpb25zO1xuXG4gICAgaWYgKGlzU2VsZWN0IHx8IGNoZWNrYWJsZVJlLnRlc3QoZWxlLnR5cGUpKSB7XG4gICAgICB2YXIgZWxlVmFsdWVfMSA9IGlzQXJyYXkodmFsdWUpID8gbWFwLmNhbGwodmFsdWUsIFN0cmluZykgOiBpc051bGwodmFsdWUpID8gW10gOiBbU3RyaW5nKHZhbHVlKV07XG5cbiAgICAgIGlmIChpc1NlbGVjdCkge1xuICAgICAgICBlYWNoKGVsZS5vcHRpb25zLCBmdW5jdGlvbiAoaSwgb3B0aW9uKSB7XG4gICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gZWxlVmFsdWVfMS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPj0gMDtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGUuY2hlY2tlZCA9IGVsZVZhbHVlXzEuaW5kZXhPZihlbGUudmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZS52YWx1ZSA9IGlzVW5kZWZpbmVkKHZhbHVlKSB8fCBpc051bGwodmFsdWUpID8gJycgOiB2YWx1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mbi52YWwgPSB2YWw7XG5cbmZuLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIHJldHVybiBlbGUuY2xvbmVOb2RlKHRydWUpO1xuICB9KTtcbn07XG5cbmZuLmRldGFjaCA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XG4gIGZpbHRlcmVkKHRoaXMsIGNvbXBhcmF0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIGlmIChlbGUucGFyZW50Tm9kZSkge1xuICAgICAgZWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnZhciBmcmFnbWVudFJlID0gL15cXHMqPChcXHcrKVtePl0qPi8sXG4gICAgc2luZ2xlVGFnUmUgPSAvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPik/JC87XG52YXIgY29udGFpbmVycyA9IHtcbiAgJyonOiBkaXYsXG4gIHRyOiB0Ym9keSxcbiAgdGQ6IHRyLFxuICB0aDogdHIsXG4gIHRoZWFkOiB0YWJsZSxcbiAgdGJvZHk6IHRhYmxlLFxuICB0Zm9vdDogdGFibGVcbn07IC8vVE9ETzogQ3JlYXRlIGVsZW1lbnRzIGluc2lkZSBhIGRvY3VtZW50IGZyYWdtZW50LCBpbiBvcmRlciB0byBwcmV2ZW50IGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGZpcmluZ1xuLy9UT0RPOiBFbnN1cmUgdGhlIGNyZWF0ZWQgZWxlbWVudHMgaGF2ZSB0aGUgZnJhZ21lbnQgYXMgdGhlaXIgcGFyZW50IGluc3RlYWQgb2YgbnVsbCwgdGhpcyBhbHNvIGVuc3VyZXMgd2UgY2FuIGRlYWwgd2l0aCBkZXRhdGNoZWQgbm9kZXMgbW9yZSByZWxpYWJseVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwoaHRtbCkge1xuICBpZiAoIWlzU3RyaW5nKGh0bWwpKSByZXR1cm4gW107XG4gIGlmIChzaW5nbGVUYWdSZS50ZXN0KGh0bWwpKSByZXR1cm4gW2NyZWF0ZUVsZW1lbnQoUmVnRXhwLiQxKV07XG4gIHZhciBmcmFnbWVudCA9IGZyYWdtZW50UmUudGVzdChodG1sKSAmJiBSZWdFeHAuJDEsXG4gICAgICBjb250YWluZXIgPSBjb250YWluZXJzW2ZyYWdtZW50XSB8fCBjb250YWluZXJzWycqJ107XG4gIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICByZXR1cm4gY2FzaChjb250YWluZXIuY2hpbGROb2RlcykuZGV0YWNoKCkuZ2V0KCk7XG59XG5cbmNhc2gucGFyc2VIVE1MID0gcGFyc2VIVE1MO1xuXG5mbi5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgd2hpbGUgKGVsZS5maXJzdENoaWxkKSB7XG4gICAgICBlbGUucmVtb3ZlQ2hpbGQoZWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpc1swXSAmJiB0aGlzWzBdLmlubmVySFRNTDtcbiAgaWYgKGlzVW5kZWZpbmVkKGh0bWwpKSByZXR1cm4gdGhpcztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgaWYgKCFpc0VsZW1lbnQoZWxlKSkgcmV0dXJuO1xuICAgIGVsZS5pbm5lckhUTUwgPSBodG1sO1xuICB9KTtcbn1cblxuZm4uaHRtbCA9IGh0bWw7XG5cbmZuLnJlbW92ZSA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XG4gIGZpbHRlcmVkKHRoaXMsIGNvbXBhcmF0b3IpLmRldGFjaCgpLm9mZigpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAoaXNVbmRlZmluZWQodGV4dCkpIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS50ZXh0Q29udGVudCA6ICcnO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbGUpKSByZXR1cm47XG4gICAgZWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfSk7XG59XG5cbjtcbmZuLnRleHQgPSB0ZXh0O1xuXG5mbi51bndyYXAgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucGFyZW50KCkuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgaWYgKGVsZS50YWdOYW1lID09PSAnQk9EWScpIHJldHVybjtcbiAgICB2YXIgJGVsZSA9IGNhc2goZWxlKTtcbiAgICAkZWxlLnJlcGxhY2VXaXRoKCRlbGUuY2hpbGRyZW4oKSk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZuLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVsZSA9IHRoaXNbMF07XG4gIGlmICghZWxlKSByZXR1cm47XG4gIHZhciByZWN0ID0gZWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG4gICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG4gIH07XG59O1xuXG5mbi5vZmZzZXRQYXJlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGVsZS5vZmZzZXRQYXJlbnQ7XG5cbiAgICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGNvbXB1dGVTdHlsZShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY0VsZTtcbiAgfSk7XG59O1xuXG5mbi5wb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGVsZSA9IHRoaXNbMF07XG4gIGlmICghZWxlKSByZXR1cm47XG4gIHZhciBpc0ZpeGVkID0gY29tcHV0ZVN0eWxlKGVsZSwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcsXG4gICAgICBvZmZzZXQgPSBpc0ZpeGVkID8gZWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogdGhpcy5vZmZzZXQoKTtcblxuICBpZiAoIWlzRml4ZWQpIHtcbiAgICB2YXIgZG9jXzEgPSBlbGUub3duZXJEb2N1bWVudDtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlLm9mZnNldFBhcmVudCB8fCBkb2NfMS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB3aGlsZSAoKG9mZnNldFBhcmVudCA9PT0gZG9jXzEuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvY18xLmRvY3VtZW50RWxlbWVudCkgJiYgY29tcHV0ZVN0eWxlKG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ICE9PSBlbGUgJiYgaXNFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBwYXJlbnRPZmZzZXQgPSBjYXNoKG9mZnNldFBhcmVudCkub2Zmc2V0KCk7XG4gICAgICBvZmZzZXQudG9wIC09IHBhcmVudE9mZnNldC50b3AgKyBjb21wdXRlU3R5bGVJbnQob2Zmc2V0UGFyZW50LCAnYm9yZGVyVG9wV2lkdGgnKTtcbiAgICAgIG9mZnNldC5sZWZ0IC09IHBhcmVudE9mZnNldC5sZWZ0ICsgY29tcHV0ZVN0eWxlSW50KG9mZnNldFBhcmVudCwgJ2JvcmRlckxlZnRXaWR0aCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvZmZzZXQudG9wIC0gY29tcHV0ZVN0eWxlSW50KGVsZSwgJ21hcmdpblRvcCcpLFxuICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gY29tcHV0ZVN0eWxlSW50KGVsZSwgJ21hcmdpbkxlZnQnKVxuICB9O1xufTtcblxuZm4uY2hpbGRyZW4gPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICByZXR1cm4gZmlsdGVyZWQoY2FzaCh1bmlxdWUocGx1Y2sodGhpcywgZnVuY3Rpb24gKGVsZSkge1xuICAgIHJldHVybiBlbGUuY2hpbGRyZW47XG4gIH0pKSksIGNvbXBhcmF0b3IpO1xufTtcblxuZm4uY29udGVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYXNoKHVuaXF1ZShwbHVjayh0aGlzLCBmdW5jdGlvbiAoZWxlKSB7XG4gICAgcmV0dXJuIGVsZS50YWdOYW1lID09PSAnSUZSQU1FJyA/IFtlbGUuY29udGVudERvY3VtZW50XSA6IGVsZS50YWdOYW1lID09PSAnVEVNUExBVEUnID8gZWxlLmNvbnRlbnQuY2hpbGROb2RlcyA6IGVsZS5jaGlsZE5vZGVzO1xuICB9KSkpO1xufTtcblxuZm4uZmluZCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gY2FzaCh1bmlxdWUocGx1Y2sodGhpcywgZnVuY3Rpb24gKGVsZSkge1xuICAgIHJldHVybiBmaW5kKHNlbGVjdG9yLCBlbGUpO1xuICB9KSkpO1xufTsgLy8gQHJlcXVpcmUgY29yZS92YXJpYWJsZXMudHNcbi8vIEByZXF1aXJlIGNvbGxlY3Rpb24vZmlsdGVyLnRzXG4vLyBAcmVxdWlyZSB0cmF2ZXJzYWwvZmluZC50c1xuXG5cbnZhciBIVE1MQ0RBVEFSZSA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZyxcbiAgICBzY3JpcHRUeXBlUmUgPSAvXiR8Xm1vZHVsZSR8XFwvKGphdmF8ZWNtYSlzY3JpcHQvaSxcbiAgICBzY3JpcHRBdHRyaWJ1dGVzID0gWyd0eXBlJywgJ3NyYycsICdub25jZScsICdub01vZHVsZSddO1xuXG5mdW5jdGlvbiBldmFsU2NyaXB0cyhub2RlLCBkb2MpIHtcbiAgdmFyIGNvbGxlY3Rpb24gPSBjYXNoKG5vZGUpO1xuICBjb2xsZWN0aW9uLmZpbHRlcignc2NyaXB0JykuYWRkKGNvbGxlY3Rpb24uZmluZCgnc2NyaXB0JykpLmVhY2goZnVuY3Rpb24gKGksIGVsZSkge1xuICAgIGlmIChzY3JpcHRUeXBlUmUudGVzdChlbGUudHlwZSkgJiYgZG9jRWxlLmNvbnRhaW5zKGVsZSkpIHtcbiAgICAgIC8vIFRoZSBzY3JpcHQgdHlwZSBpcyBzdXBwb3J0ZWQgLy8gVGhlIGVsZW1lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTSAvLyBVc2luZyBgZG9jdW1lbnRFbGVtZW50YCBmb3IgYnJvYWRlciBicm93c2VyIHN1cHBvcnRcbiAgICAgIHZhciBzY3JpcHRfMSA9IGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0XzEudGV4dCA9IGVsZS50ZXh0Q29udGVudC5yZXBsYWNlKEhUTUxDREFUQVJlLCAnJyk7XG4gICAgICBlYWNoKHNjcmlwdEF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChpLCBhdHRyKSB7XG4gICAgICAgIGlmIChlbGVbYXR0cl0pIHNjcmlwdF8xW2F0dHJdID0gZWxlW2F0dHJdO1xuICAgICAgfSk7XG4gICAgICBkb2MuaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0XzEsIG51bGwpO1xuICAgICAgZG9jLmhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0XzEpO1xuICAgIH1cbiAgfSk7XG59IC8vIEByZXF1aXJlIC4vZXZhbF9zY3JpcHRzLnRzXG5cblxuZnVuY3Rpb24gaW5zZXJ0RWxlbWVudChhbmNob3IsIHRhcmdldCwgbGVmdCwgaW5zaWRlLCBldmFsdWF0ZSkge1xuICBpZiAoaW5zaWRlKSB7XG4gICAgLy8gcHJlcGVuZC9hcHBlbmRcbiAgICBhbmNob3IuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbGVmdCA/IGFuY2hvci5maXJzdENoaWxkIDogbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gYmVmb3JlL2FmdGVyXG4gICAgYW5jaG9yLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbGVmdCA/IGFuY2hvciA6IGFuY2hvci5uZXh0U2libGluZyk7XG4gIH1cblxuICBpZiAoZXZhbHVhdGUpIHtcbiAgICBldmFsU2NyaXB0cyh0YXJnZXQsIGFuY2hvci5vd25lckRvY3VtZW50KTtcbiAgfVxufSAvLyBAcmVxdWlyZSAuL2luc2VydF9lbGVtZW50LnRzXG5cblxuZnVuY3Rpb24gaW5zZXJ0U2VsZWN0b3JzKHNlbGVjdG9ycywgYW5jaG9ycywgaW52ZXJzZSwgbGVmdCwgaW5zaWRlLCByZXZlcnNlTG9vcDEsIHJldmVyc2VMb29wMiwgcmV2ZXJzZUxvb3AzKSB7XG4gIGVhY2goc2VsZWN0b3JzLCBmdW5jdGlvbiAoc2ksIHNlbGVjdG9yKSB7XG4gICAgZWFjaChjYXNoKHNlbGVjdG9yKSwgZnVuY3Rpb24gKHRpLCB0YXJnZXQpIHtcbiAgICAgIGVhY2goY2FzaChhbmNob3JzKSwgZnVuY3Rpb24gKGFpLCBhbmNob3IpIHtcbiAgICAgICAgdmFyIGFuY2hvckZpbmFsID0gaW52ZXJzZSA/IHRhcmdldCA6IGFuY2hvcixcbiAgICAgICAgICAgIHRhcmdldEZpbmFsID0gaW52ZXJzZSA/IGFuY2hvciA6IHRhcmdldCxcbiAgICAgICAgICAgIGluZGV4RmluYWwgPSBpbnZlcnNlID8gdGkgOiBhaTtcbiAgICAgICAgaW5zZXJ0RWxlbWVudChhbmNob3JGaW5hbCwgIWluZGV4RmluYWwgPyB0YXJnZXRGaW5hbCA6IHRhcmdldEZpbmFsLmNsb25lTm9kZSh0cnVlKSwgbGVmdCwgaW5zaWRlLCAhaW5kZXhGaW5hbCk7XG4gICAgICB9LCByZXZlcnNlTG9vcDMpO1xuICAgIH0sIHJldmVyc2VMb29wMik7XG4gIH0sIHJldmVyc2VMb29wMSk7XG4gIHJldHVybiBhbmNob3JzO1xufVxuXG5mbi5hZnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGluc2VydFNlbGVjdG9ycyhhcmd1bWVudHMsIHRoaXMsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRydWUsIHRydWUpO1xufTtcblxuZm4uYXBwZW5kID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaW5zZXJ0U2VsZWN0b3JzKGFyZ3VtZW50cywgdGhpcywgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbn07XG5cbmZuLmFwcGVuZFRvID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIHJldHVybiBpbnNlcnRTZWxlY3RvcnMoYXJndW1lbnRzLCB0aGlzLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG5mbi5iZWZvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpbnNlcnRTZWxlY3RvcnMoYXJndW1lbnRzLCB0aGlzLCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG5mbi5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gaW5zZXJ0U2VsZWN0b3JzKGFyZ3VtZW50cywgdGhpcywgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xufTtcblxuZm4uaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIHJldHVybiBpbnNlcnRTZWxlY3RvcnMoYXJndW1lbnRzLCB0aGlzLCB0cnVlLCB0cnVlKTtcbn07XG5cbmZuLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpbnNlcnRTZWxlY3RvcnMoYXJndW1lbnRzLCB0aGlzLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG59O1xuXG5mbi5wcmVwZW5kVG8gPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGluc2VydFNlbGVjdG9ycyhhcmd1bWVudHMsIHRoaXMsIHRydWUsIHRydWUsIHRydWUsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG59O1xuXG5mbi5yZXBsYWNlV2l0aCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5iZWZvcmUoc2VsZWN0b3IpLnJlbW92ZSgpO1xufTtcblxuZm4ucmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICBjYXNoKHNlbGVjdG9yKS5yZXBsYWNlV2l0aCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mbi53cmFwQWxsID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIHZhciBzdHJ1Y3R1cmUgPSBjYXNoKHNlbGVjdG9yKSxcbiAgICAgIHdyYXBwZXIgPSBzdHJ1Y3R1cmVbMF07XG5cbiAgd2hpbGUgKHdyYXBwZXIuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgd3JhcHBlciA9IHdyYXBwZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIH1cblxuICB0aGlzLmZpcnN0KCkuYmVmb3JlKHN0cnVjdHVyZSk7XG4gIHJldHVybiB0aGlzLmFwcGVuZFRvKHdyYXBwZXIpO1xufTtcblxuZm4ud3JhcCA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICB2YXIgd3JhcHBlciA9IGNhc2goc2VsZWN0b3IpWzBdO1xuICAgIGNhc2goZWxlKS53cmFwQWxsKCFpID8gd3JhcHBlciA6IHdyYXBwZXIuY2xvbmVOb2RlKHRydWUpKTtcbiAgfSk7XG59O1xuXG5mbi53cmFwSW5uZXIgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgdmFyICRlbGUgPSBjYXNoKGVsZSksXG4gICAgICAgIGNvbnRlbnRzID0gJGVsZS5jb250ZW50cygpO1xuICAgIGNvbnRlbnRzLmxlbmd0aCA/IGNvbnRlbnRzLndyYXBBbGwoc2VsZWN0b3IpIDogJGVsZS5hcHBlbmQoc2VsZWN0b3IpO1xuICB9KTtcbn07XG5cbmZuLmhhcyA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICB2YXIgY29tcGFyYXRvciA9IGlzU3RyaW5nKHNlbGVjdG9yKSA/IGZ1bmN0aW9uIChpLCBlbGUpIHtcbiAgICByZXR1cm4gZmluZChzZWxlY3RvciwgZWxlKS5sZW5ndGg7XG4gIH0gOiBmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgcmV0dXJuIGVsZS5jb250YWlucyhzZWxlY3Rvcik7XG4gIH07XG4gIHJldHVybiB0aGlzLmZpbHRlcihjb21wYXJhdG9yKTtcbn07XG5cbmZuLmlzID0gZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcbiAgdmFyIGNvbXBhcmUgPSBnZXRDb21wYXJlRnVuY3Rpb24oY29tcGFyYXRvcik7XG4gIHJldHVybiBzb21lLmNhbGwodGhpcywgZnVuY3Rpb24gKGVsZSwgaSkge1xuICAgIHJldHVybiBjb21wYXJlLmNhbGwoZWxlLCBpLCBlbGUpO1xuICB9KTtcbn07XG5cbmZuLm5leHQgPSBmdW5jdGlvbiAoY29tcGFyYXRvciwgX2FsbCwgX3VudGlsKSB7XG4gIHJldHVybiBmaWx0ZXJlZChjYXNoKHVuaXF1ZShwbHVjayh0aGlzLCAnbmV4dEVsZW1lbnRTaWJsaW5nJywgX2FsbCwgX3VudGlsKSkpLCBjb21wYXJhdG9yKTtcbn07XG5cbmZuLm5leHRBbGwgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICByZXR1cm4gdGhpcy5uZXh0KGNvbXBhcmF0b3IsIHRydWUpO1xufTtcblxuZm4ubmV4dFVudGlsID0gZnVuY3Rpb24gKHVudGlsLCBjb21wYXJhdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHQoY29tcGFyYXRvciwgdHJ1ZSwgdW50aWwpO1xufTtcblxuZm4ubm90ID0gZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcbiAgdmFyIGNvbXBhcmUgPSBnZXRDb21wYXJlRnVuY3Rpb24oY29tcGFyYXRvcik7XG4gIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAoaSwgZWxlKSB7XG4gICAgcmV0dXJuICghaXNTdHJpbmcoY29tcGFyYXRvcikgfHwgaXNFbGVtZW50KGVsZSkpICYmICFjb21wYXJlLmNhbGwoZWxlLCBpLCBlbGUpO1xuICB9KTtcbn07XG5cbmZuLnBhcmVudCA9IGZ1bmN0aW9uIChjb21wYXJhdG9yKSB7XG4gIHJldHVybiBmaWx0ZXJlZChjYXNoKHVuaXF1ZShwbHVjayh0aGlzLCAncGFyZW50Tm9kZScpKSksIGNvbXBhcmF0b3IpO1xufTtcblxuZm4uaW5kZXggPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgdmFyIGNoaWxkID0gc2VsZWN0b3IgPyBjYXNoKHNlbGVjdG9yKVswXSA6IHRoaXNbMF0sXG4gICAgICBjb2xsZWN0aW9uID0gc2VsZWN0b3IgPyB0aGlzIDogY2FzaChjaGlsZCkucGFyZW50KCkuY2hpbGRyZW4oKTtcbiAgcmV0dXJuIGluZGV4T2YuY2FsbChjb2xsZWN0aW9uLCBjaGlsZCk7XG59O1xuXG5mbi5jbG9zZXN0ID0gZnVuY3Rpb24gKGNvbXBhcmF0b3IpIHtcbiAgdmFyIGZpbHRlcmVkID0gdGhpcy5maWx0ZXIoY29tcGFyYXRvcik7XG4gIGlmIChmaWx0ZXJlZC5sZW5ndGgpIHJldHVybiBmaWx0ZXJlZDtcbiAgdmFyICRwYXJlbnQgPSB0aGlzLnBhcmVudCgpO1xuICBpZiAoISRwYXJlbnQubGVuZ3RoKSByZXR1cm4gZmlsdGVyZWQ7XG4gIHJldHVybiAkcGFyZW50LmNsb3Nlc3QoY29tcGFyYXRvcik7XG59O1xuXG5mbi5wYXJlbnRzID0gZnVuY3Rpb24gKGNvbXBhcmF0b3IsIF91bnRpbCkge1xuICByZXR1cm4gZmlsdGVyZWQoY2FzaCh1bmlxdWUocGx1Y2sodGhpcywgJ3BhcmVudEVsZW1lbnQnLCB0cnVlLCBfdW50aWwpKSksIGNvbXBhcmF0b3IpO1xufTtcblxuZm4ucGFyZW50c1VudGlsID0gZnVuY3Rpb24gKHVudGlsLCBjb21wYXJhdG9yKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudHMoY29tcGFyYXRvciwgdW50aWwpO1xufTtcblxuZm4ucHJldiA9IGZ1bmN0aW9uIChjb21wYXJhdG9yLCBfYWxsLCBfdW50aWwpIHtcbiAgcmV0dXJuIGZpbHRlcmVkKGNhc2godW5pcXVlKHBsdWNrKHRoaXMsICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJywgX2FsbCwgX3VudGlsKSkpLCBjb21wYXJhdG9yKTtcbn07XG5cbmZuLnByZXZBbGwgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICByZXR1cm4gdGhpcy5wcmV2KGNvbXBhcmF0b3IsIHRydWUpO1xufTtcblxuZm4ucHJldlVudGlsID0gZnVuY3Rpb24gKHVudGlsLCBjb21wYXJhdG9yKSB7XG4gIHJldHVybiB0aGlzLnByZXYoY29tcGFyYXRvciwgdHJ1ZSwgdW50aWwpO1xufTtcblxuZm4uc2libGluZ3MgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xuICByZXR1cm4gZmlsdGVyZWQoY2FzaCh1bmlxdWUocGx1Y2sodGhpcywgZnVuY3Rpb24gKGVsZSkge1xuICAgIHJldHVybiBjYXNoKGVsZSkucGFyZW50KCkuY2hpbGRyZW4oKS5ub3QoZWxlKTtcbiAgfSkpKSwgY29tcGFyYXRvcik7XG59OyAvLyBAb3B0aW9uYWwgLi9jaGlsZHJlbi50c1xuLy8gQG9wdGlvbmFsIC4vY2xvc2VzdC50c1xuLy8gQG9wdGlvbmFsIC4vY29udGVudHMudHNcbi8vIEBvcHRpb25hbCAuL2ZpbmQudHNcbi8vIEBvcHRpb25hbCAuL2hhcy50c1xuLy8gQG9wdGlvbmFsIC4vaXMudHNcbi8vIEBvcHRpb25hbCAuL25leHQudHNcbi8vIEBvcHRpb25hbCAuL25leHRfYWxsLnRzXG4vLyBAb3B0aW9uYWwgLi9uZXh0X3VudGlsLnRzXG4vLyBAb3B0aW9uYWwgLi9ub3QudHNcbi8vIEBvcHRpb25hbCAuL3BhcmVudC50c1xuLy8gQG9wdGlvbmFsIC4vcGFyZW50cy50c1xuLy8gQG9wdGlvbmFsIC4vcGFyZW50c191bnRpbC50c1xuLy8gQG9wdGlvbmFsIC4vcHJldi50c1xuLy8gQG9wdGlvbmFsIC4vcHJldl9hbGwudHNcbi8vIEBvcHRpb25hbCAuL3ByZXZfdW50aWwudHNcbi8vIEBvcHRpb25hbCAuL3NpYmxpbmdzLnRzXG4vLyBAb3B0aW9uYWwgYXR0cmlidXRlcy9pbmRleC50c1xuLy8gQG9wdGlvbmFsIGNvbGxlY3Rpb24vaW5kZXgudHNcbi8vIEBvcHRpb25hbCBjc3MvaW5kZXgudHNcbi8vIEBvcHRpb25hbCBkYXRhL2luZGV4LnRzXG4vLyBAb3B0aW9uYWwgZGltZW5zaW9ucy9pbmRleC50c1xuLy8gQG9wdGlvbmFsIGVmZmVjdHMvaW5kZXgudHNcbi8vIEBvcHRpb25hbCBldmVudHMvaW5kZXgudHNcbi8vIEBvcHRpb25hbCBmb3Jtcy9pbmRleC50c1xuLy8gQG9wdGlvbmFsIG1hbmlwdWxhdGlvbi9pbmRleC50c1xuLy8gQG9wdGlvbmFsIG9mZnNldC9pbmRleC50c1xuLy8gQG9wdGlvbmFsIHRyYXZlcnNhbC9pbmRleC50c1xuLy8gQHJlcXVpcmUgY29yZS9pbmRleC50c1xuLy8gQHByaW9yaXR5IC0xMDBcbi8vIEByZXF1aXJlIC4vY2FzaC50c1xuLy8gQHJlcXVpcmUgLi92YXJpYWJsZXMudHNcblxuXG5pZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIE5vZGUuanNcbiAgbW9kdWxlLmV4cG9ydHMgPSBjYXNoO1xufSBlbHNlIHtcbiAgLy8gQnJvd3NlclxuICB3aW5bJ2Nhc2gnXSA9IHdpblsnJCddID0gY2FzaDtcbn1cbn0pKCk7IiwiY29uc3QgJCA9IHJlcXVpcmUoJ2Nhc2gtZG9tJyk7XHJcbmNvbnN0IGNyZWF0ZVNsaWRlciA9IHJlcXVpcmUoJy4vd2lkb2stc2xpZGVyJyk7XHJcblxyXG4kKCcuc2xpZGVyLXdpdGgtYnVsbGV0cycpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XHJcbiAgd2luZG93LnNsaWRlciA9IGNyZWF0ZVNsaWRlcih7XHJcbiAgICB3cmFwOiBgI3NsaWRlci13aXRoLWJ1bGxldHMtJHtpbmRleH0gLnNsaWRlcmAsXHJcbiAgICBidWxsZXRDb250YWluZXI6IGAjc2xpZGVyLXdpdGgtYnVsbGV0cy0ke2luZGV4fSAuYnVsbGV0cy1jb250YWluZXJgLFxyXG4gICAgYnVsbGV0U2VsZWN0b3I6IGAjc2xpZGVyLXdpdGgtYnVsbGV0cy0ke2luZGV4fSAuYnVsbGV0YCxcclxuICAgIHVzZUtleXM6IHRydWUsXHJcbiAgICBtb3VzZURyYWc6IHRydWUsXHJcbiAgICBhcnJvd1ByZXY6ICcuc2xpZGVyLXdpdGgtYnVsbGV0cyAuYXJyb3ctbGVmdCcsXHJcbiAgICBhcnJvd05leHQ6ICcuc2xpZGVyLXdpdGgtYnVsbGV0cyAuYXJyb3ctcmlnaHQnLFxyXG4gIH0pO1xyXG59KTtcclxuIiwiY29uc3QgJCA9IHJlcXVpcmUoJ2Nhc2gtZG9tJyk7XHJcbnJlcXVpcmUoJy4vbmF2Jyk7XHJcbnJlcXVpcmUoJy4vd2lkb2snKTtcclxuXHJcbmNvbnN0IGJvZHlFbGVtZW50ID0gJCgnYm9keScpO1xyXG5pZiAoYm9keUVsZW1lbnQuaGFzQ2xhc3MoJ3BhZ2UtdGVtcGxhdGUtdC1hdHJha2NqZScpKSByZXF1aXJlKCcuL2F0cmFrY2plJyk7XHJcbiIsImNvbnN0ICQgPSByZXF1aXJlKCdjYXNoLWRvbScpO1xyXG5cclxuJCgnI2J1cmdlcicpLm9uKCdjbGljaycsICgpID0+IHtcclxuICAkKCcjbmF2JykudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xyXG59KTtcclxuIiwiY29uc3QgJCA9IHJlcXVpcmUoJ2Nhc2gtZG9tJyk7XHJcblxyXG5jb25zdCBjcmVhdGVIb3ZlcmFibGUgPSAoZnVuY3Rpb24gKCkge1xyXG4gIGNsYXNzIEhvdmVyYWJsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcbiAgICAgIHRoaXMuaGFzSG92ZXJlZENsYXNzID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuaXNUb3VjaGVkID0gZmFsc2U7XHJcblxyXG4gICAgICB0aGlzLmVsZW1lbnQub24oe1xyXG4gICAgICAgIG1vdXNlZW50ZXI6IHRoaXMuYWN0aXZhdGUuYmluZCh0aGlzKSxcclxuICAgICAgICBtb3VzZWxlYXZlOiB0aGlzLmRlYWN0aXZhdGUuYmluZCh0aGlzKSxcclxuICAgICAgICB0b3VjaHN0YXJ0OiAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmlzVG91Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcclxuICAgICAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG91Y2hlbmQ6ICgpID0+IHtcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNUb3VjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICBpZiAodGhpcy5oYXNIb3ZlcmVkQ2xhc3MpIHJldHVybjtcclxuICAgICAgaWYgKHRoaXMuaXNUb3VjaGVkKSByZXR1cm47XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcygnaG92ZXJlZCcpO1xyXG4gICAgICB0aGlzLmhhc0hvdmVyZWRDbGFzcyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZGVhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKCF0aGlzLmhhc0hvdmVyZWRDbGFzcykgcmV0dXJuO1xyXG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2hvdmVyZWQnKTtcclxuICAgICAgdGhpcy5oYXNIb3ZlcmVkQ2xhc3MgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG5ldyBIb3ZlcmFibGUob3B0aW9ucyk7XHJcbiAgfTtcclxufSkoKTtcclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVIb3ZlcmFibGU7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGUgYSBzbGlkZXIuIFZlcnRpY2FsIHNsaWRlciBtaWdodCBub3Qgd29yayB5ZXQuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIGV4dHJhIG9wdGlvbnNcclxuICogQHBhcmFtIHtzZWxlY3Rvcn0gb3B0aW9ucy53cmFwIHNlbGVjdG9yIG9mIHRoZSBzbGlkZXIgd3JhcFxyXG4gKiBAcGFyYW0ge3NlbGVjdG9yfSBvcHRpb25zLnNsaWRlU2VsZWN0b3IgZGVmYXVsdD0nLnNpbmdsZS1zbGlkZScsIHNlbGVjdG9yIG9mIGEgc2luZ2xlIHNsaWRlLCBzZWFyY2hlZCBpbnNpZGUgd3JhcFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuc2hvdWxkSGF2ZUJ1bGxldHMgZGVmYXVsdD10cnVlLFxyXG4gKiBAcGFyYW0ge3NlbGVjdG9yfSBvcHRpb25zLmJ1bGxldENvbnRhaW5lclxyXG4gKiBAcGFyYW0ge3NlbGVjdG9yfSBvcHRpb25zLmJ1bGxldFNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5pc1ZlcnRpY2FsIGRlZmF1bHQ9ZmFsc2UsIGRpcmVjdGlvbiBvZiB0aGUgc2xpZGVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLmluaXRpYWxTbGlkZSBkZWZhdWx0PTAsIGlkIG9mIHRoZSBpbml0aWFsbHkgc2VsZWN0ZWQgc2xpZGVcclxuICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMuZHVyYXRpb24gZGVmYXVsdD0zMDAsIGR1cmF0aW9uIG9mIHRoZSBzbGlkaW5nIGFuaW1hdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMubW91c2VEcmFnIGRlZmF1bHQ9ZmFsc2UsIGFsbG93cyBzbGlkZXIgdG8gYmUgZHJhZ2dlZCB3aXRoIHRoZSBtb3VzZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMudG91Y2hEcmFnIGRlZmF1bHQ9ZmFsc2UsIGFsbG93cyBzbGlkZXIgdG8gYmUgZHJhZ2dlZCBvbiBhIHRvdWNoc2NyZWVuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5zbGlkZU9uV2hlZWwgZGVmYXVsdD1mYWxzZSxcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLnVzZUtleXMgZGVmYXVsdD1mYWxzZSwgY2hhbmdlcyBzbGlkZXMgb24gYXJyb3cga2V5cywgY2FuIGJlIGNoYW5nZWQgbGF0ZXJcclxuICogQHBhcmFtIHtzZWxlY3Rvcn0gb3B0aW9ucy5hcnJvd1ByZXYgc2VsZWN0b3Igb2YgdGhlIHVwIGFycm93LCBzZWFyY2hlZCBpbiB0aGUgd2hvbGUgZG9jdW1lbnRcclxuICogQHBhcmFtIHtzZWxlY3Rvcn0gb3B0aW9ucy5hcnJvd05leHQgYW5hbG9nb3VzXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMub25BY3RpdmF0ZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiBhIHNsaWRlIGFjdGl2YXRlc1xyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLm9uRGVhY3RpdmF0ZSBhbmFsb2dvdXNcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLmxvb3AgZGVmYXVsdD1mYWxzZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5hbmltYXRpb25UeXBlIGRlZmF1bHQ9XCJzbGlkZVwiLCAnZmFkZScgLSBmYWRlIGVmZmVjdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuc2xpZGVzQXNMaW5rcyBkZWZhdWx0PWZhbHNlLCBjbGlja2luZyBvbiBhIHNsaWRlIGFjdGl2YXRlcyBpdFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuYWRqdXN0SGVpZ2h0IGRlZmF1bHQ9ZmFsc2UsIGFmdGVyIHN3aXRjaGluZyBzbGlkZXMgdGhlIGhlaWdodCBvZiB0aGUgc2xpZGVyIGlzIGNoYW5nZWRcclxuICogQHJldHVybnMgU2xpZGVyIG9iamVjdFxyXG4gKi9cclxuXHJcbmNvbnN0ICQgPSByZXF1aXJlKCdjYXNoLWRvbScpO1xyXG5jb25zdCBjcmVhdGVIb3ZlcmFibGUgPSByZXF1aXJlKCcuL3dpZG9rLWhvdmVyYWJsZScpO1xyXG5cclxuY29uc3QgY3JlYXRlU2xpZGVyID0gKGZ1bmN0aW9uICgpIHtcclxuICBjbGFzcyBTbGlkZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICB0aGlzLmlkID0gKytTbGlkZXIubGFzdElkO1xyXG4gICAgICB0aGlzLndyYXAgPSAkKG9wdGlvbnMud3JhcCk7XHJcbiAgICAgIGlmICh0aGlzLndyYXAubGVuZ3RoICE9PSAxKSByZXR1cm47XHJcblxyXG4gICAgICB0aGlzLnByZXBhcmVPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgICB0aGlzLmN1cnJlbnRTbGlkZUlkID0gdGhpcy5vcHRpb25zLmluaXRpYWxTbGlkZTsgLy8gaWQgb2YgdGhlIGN1cnJlbnQgc2xpZGVcclxuICAgICAgdGhpcy5zbGlkZU9mZnNldCA9IDA7IC8vIG51bWJlciBvZiBwaXhlbHMgZnJvbSBjdXJyZW50IHNsaWRlIGJlZ2lubmluZ1xyXG4gICAgICB0aGlzLnBvc2l0aW9uID0gMDsgLy8gY3VycmVudCBzY3JvbGwgYW1vdW50IGluIHBpeGVsc1xyXG4gICAgICB0aGlzLmJhclNpemUgPSAwOyAvLyBzaXplIG9mIHRoZSBlbnRpcmUgc2Nyb2xsIGJhclxyXG4gICAgICB0aGlzLnNpemUgPSAwOyAvLyBzaXplIG9mIHRoZSBzaXplciBlbGVtZW50XHJcbiAgICAgIHRoaXMuaXNTbGlkaW5nID0gZmFsc2U7IC8vIGlzIHNsaWRlciBjdXJyZW50bHkgYmVpbmcgYW5pbWF0ZWRcclxuICAgICAgdGhpcy5pc0RyYWdnZWQgPSBmYWxzZTsgLy8gaXMgc2xpZGVyIGN1cnJlbnRseSBiZWluZyBkcmFnZ2VkXHJcbiAgICAgIHRoaXMuaXNFbmFibGVkID0gb3B0aW9ucy5pc0VuYWJsZWQ7XHJcbiAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB0aGlzLmlzRW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICB0aGlzLnByZXBhcmVBcnJvd3MoKTtcclxuICAgICAgdGhpcy5wcmVwYXJlU2xpZGVzKCk7XHJcbiAgICAgIHRoaXMucHJlcGFyZVdoZWVsKCk7XHJcbiAgICAgIHRoaXMucHJlcGFyZURyYWcoKTtcclxuXHJcbiAgICAgIHRoaXMuY2hlY2tTaXplID0gdGhpcy5jaGVja1NpemUuYmluZCh0aGlzKTtcclxuICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgdGhpcy5lbmRNb3VzZU1vdmUgPSB0aGlzLmVuZE1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbGF5b3V0Q2hhbmdlJywgdGhpcy5jaGVja1NpemUpO1xyXG5cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb29wKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2xpZGVJZCA9IHRoaXMuc2xpZGVzLmxlbmd0aCAvIDM7XHJcbiAgICAgICAgdGhpcy5hcHBseVBvc2l0aW9uKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc2xpZGVzW3RoaXMuY3VycmVudFNsaWRlSWRdLmFjdGl2YXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZU9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgc2xpZGVPbldoZWVsOiBmYWxzZSxcclxuICAgICAgICBzaG91bGRIYXZlQnVsbGV0czogdHJ1ZSxcclxuICAgICAgICBzbGlkZVNlbGVjdG9yOiAnLnNpbmdsZS1zbGlkZScsXHJcbiAgICAgICAgaXNWZXJ0aWNhbDogZmFsc2UsXHJcbiAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxyXG4gICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgbW91c2VEcmFnOiBmYWxzZSxcclxuICAgICAgICB0b3VjaERyYWc6IGZhbHNlLFxyXG4gICAgICAgIHVzZUtleXM6IGZhbHNlLFxyXG4gICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgIHNsaWRlc0FzTGlua3M6IGZhbHNlLFxyXG4gICAgICAgIGFkanVzdEhlaWdodDogZmFsc2UsXHJcbiAgICAgICAgYW5pbWF0aW9uVHlwZTogJ3NsaWRlJyxcclxuICAgICAgfTtcclxuICAgICAgZm9yIChjb25zdCBvcHRpb25OYW1lIGluIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnNbb3B0aW9uTmFtZV0gPSBvcHRpb25zW29wdGlvbk5hbWVdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZVNsaWRlcygpIHtcclxuICAgICAgdGhpcy5zaXplciA9ICQoJzxkaXYgY2xhc3M9XCJmMy1zbGlkZXItc2l6ZXJcIj4nKVxyXG4gICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgIG1hcmdpbjogJzAgYXV0bycsXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuYXBwZW5kVG8odGhpcy53cmFwKTtcclxuICAgICAgdGhpcy5iYXIgPSAkKCc8ZGl2IGNsYXNzPVwiZjMtc2xpZGVyLWJhclwiPicpLmFwcGVuZFRvKHRoaXMuc2l6ZXIpO1xyXG4gICAgICB0aGlzLnNsaWRlcyA9IFtdO1xyXG5cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG91bGRIYXZlQnVsbGV0cykge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnVsbGV0Q29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuYnVsbGV0Q29udGFpbmVyID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSlcclxuICAgICAgICAgICAgLmFkZENsYXNzKCdmMy1zbGlkZXItYnVsbGV0LWNvbnRhaW5lcicpXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLndyYXApXHJcbiAgICAgICAgICAgIC5vbigndG91Y2hzdGFydCcsIGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmJ1bGxldENvbnRhaW5lciA9ICQodGhpcy5vcHRpb25zLmJ1bGxldENvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBmb3VuZFNsaWRlcyA9IHRoaXMud3JhcC5maW5kKHRoaXMub3B0aW9ucy5zbGlkZVNlbGVjdG9yKTtcclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb29wKSB7XHJcbiAgICAgICAgZm91bmRTbGlkZXMuY2xvbmUoKS5tYXAoKGluZGV4LCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICBsZXQgc2xpZGUgPSBuZXcgU2xpZGUoZWxlbWVudCwgdGhpcyk7XHJcbiAgICAgICAgICBzbGlkZS5lbGVtZW50LmFwcGVuZFRvKHRoaXMuYmFyKTtcclxuICAgICAgICAgIHRoaXMuc2xpZGVzLnB1c2goc2xpZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvdW5kU2xpZGVzLmNsb25lKCkubWFwKChpbmRleCwgZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgbGV0IHNsaWRlID0gbmV3IFNsaWRlKGVsZW1lbnQsIHRoaXMpO1xyXG4gICAgICAgICAgc2xpZGUuZWxlbWVudC5hcHBlbmRUbyh0aGlzLmJhcik7XHJcbiAgICAgICAgICB0aGlzLnNsaWRlcy5wdXNoKHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBmb3VuZFNsaWRlcy5tYXAoKGluZGV4LCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNsaWRlID0gbmV3IFNsaWRlKGVsZW1lbnQsIHRoaXMpO1xyXG4gICAgICAgIHNsaWRlLmVsZW1lbnQuYXBwZW5kVG8odGhpcy5iYXIpO1xyXG4gICAgICAgIHRoaXMuc2xpZGVzLnB1c2goc2xpZGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4gc2xpZGUuY3JlYXRlQnVsbGV0KCkpO1xyXG5cclxuICAgICAgdGhpcy53cmFwLmNzcyh7XHJcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXHJcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5iYXIuY3NzKHtcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICBoZWlnaHQ6IDEwMCArICclJyxcclxuICAgICAgICB3aWR0aDogMTAwICsgJyUnLFxyXG4gICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgY29uc3Qgd2VpZ2h0U3VtID0gdGhpcy5zbGlkZXMucmVkdWNlKFxyXG4gICAgICAgICAgKHByZXYsIGN1cnIpID0+IHByZXYgKyBjdXJyLndlaWdodCxcclxuICAgICAgICAgIDBcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYmFyLmNzcyh7XHJcbiAgICAgICAgICB3aWR0aDogd2VpZ2h0U3VtICogMTAwICsgJyUnLFxyXG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2xpZGVzLm1hcChzbGlkZSA9PlxyXG4gICAgICAgICAgc2xpZGUuZWxlbWVudC5jc3Moe1xyXG4gICAgICAgICAgICB3aWR0aDogKDEwMCAqIHNsaWRlLndlaWdodCkgLyB3ZWlnaHRTdW0gKyAnJScsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcmVwYXJlQXJyb3dzKCkge1xyXG4gICAgICB0aGlzLmlzQXJyb3dQcmV2QWN0aXZlID0gdHJ1ZTtcclxuICAgICAgdGhpcy5pc0Fycm93TmV4dEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuYXJyb3dQcmV2ID0gJCh0aGlzLm9wdGlvbnMuYXJyb3dQcmV2KTtcclxuICAgICAgdGhpcy5hcnJvd05leHQgPSAkKHRoaXMub3B0aW9ucy5hcnJvd05leHQpO1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFycm93TmV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5hcnJvd05leHQgPSB0aGlzLndyYXAuZmluZCgnLmFycm93LW5leHQnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFycm93UHJldiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5hcnJvd1ByZXYgPSB0aGlzLndyYXAuZmluZCgnLmFycm93LXByZXYnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuYXJyb3dOZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLmFycm93TmV4dC5vbih7XHJcbiAgICAgICAgICBjbGljazogdGhpcy5uZXh0U2xpZGUuYmluZCh0aGlzKSxcclxuICAgICAgICAgIHRvdWNoc3RhcnQ6IGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNyZWF0ZUhvdmVyYWJsZSh0aGlzLmFycm93TmV4dCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuYXJyb3dQcmV2Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICB0aGlzLmFycm93UHJldi5vbih7XHJcbiAgICAgICAgICBjbGljazogdGhpcy5wcmV2U2xpZGUuYmluZCh0aGlzKSxcclxuICAgICAgICAgIHRvdWNoc3RhcnQ6IGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNyZWF0ZUhvdmVyYWJsZSh0aGlzLmFycm93UHJldik7XHJcbiAgICAgIH1cclxuICAgICAgJCh3aW5kb3cpLm9uKCdrZXlkb3duJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnVzZUtleXMpIHJldHVybjtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAoIXRoaXMub3B0aW9ucy5pc1ZlcnRpY2FsICYmIGV2ZW50LndoaWNoID09PSAzOSkgfHxcclxuICAgICAgICAgICh0aGlzLm9wdGlvbnMuaXNWZXJ0aWNhbCAmJiBldmVudC53aGljaCA9PT0gNDApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLm5leHRTbGlkZSgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAoIXRoaXMub3B0aW9ucy5pc1ZlcnRpY2FsICYmIGV2ZW50LndoaWNoID09PSAzNykgfHxcclxuICAgICAgICAgICh0aGlzLm9wdGlvbnMuaXNWZXJ0aWNhbCAmJiBldmVudC53aGljaCA9PT0gMzgpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLnByZXZTbGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZVdoZWVsKCkge1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNsaWRlT25XaGVlbCkge1xyXG4gICAgICAgIHRoaXMud3JhcC5vbignd2hlZWwnLCBldmVudCA9PiB7XHJcbiAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgaWYgKHRoaXMuaXNTbGlkaW5nKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGVCb3R0b20gPSB0aGlzLnNsaWRlc1t0aGlzLmN1cnJlbnRTbGlkZUlkXS5zaXplO1xyXG4gICAgICAgICAgICBjb25zdCB3cmFwQm90dG9tID0gdGhpcy5zaXplIC0gdGhpcy5zbGlkZU9mZnNldDtcclxuICAgICAgICAgICAgaWYgKHNsaWRlQm90dG9tIDw9IHdyYXBCb3R0b20gKyAxKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5uZXh0U2xpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0aGlzLnNsaWRlT2Zmc2V0ID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlT2Zmc2V0IC0gMTUwLFxyXG4gICAgICAgICAgICAgICAgLXRoaXMuc2xpZGVzW3RoaXMuY3VycmVudFNsaWRlSWRdLnNpemUgKyB0aGlzLnNpemVcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIHRoaXMuYXBwbHlQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmRlbHRhWSA8IDApIHtcclxuICAgICAgICAgICAgaWYgKDAgPD0gdGhpcy5zbGlkZU9mZnNldCArIDEpIHtcclxuICAgICAgICAgICAgICB0aGlzLnByZXZTbGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2xpZGVPZmZzZXQgPSBNYXRoLm1pbih0aGlzLnNsaWRlT2Zmc2V0ICsgMTUwLCAwKTtcclxuICAgICAgICAgICAgICB0aGlzLmFwcGx5UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZURyYWcoKSB7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudG91Y2hEcmFnKSB7XHJcbiAgICAgICAgdGhpcy5lbmREcmFnID0gdGhpcy5lbmREcmFnLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkRyYWcgPSB0aGlzLm9uRHJhZy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMud3JhcC5vbigndG91Y2hzdGFydCcsIGV2ZW50ID0+IHtcclxuICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHJldHVybjtcclxuICAgICAgICAgIC8vIFRPRE86IGFkZCBhbiBvcHRpb24gdG8gc3dpdGNoIHRoaXNcclxuICAgICAgICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBpZiAodGhpcy5pc1NsaWRpbmcpIHJldHVybjtcclxuICAgICAgICAgIHRoaXMuZHJhZ1N0YXJ0ID0ge1xyXG4gICAgICAgICAgICB4OiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCxcclxuICAgICAgICAgICAgeTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdGhpcy5vbk1vdmVTdGFydCgpO1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5lbmREcmFnKTtcclxuICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uRHJhZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5tb3VzZURyYWcpIHtcclxuICAgICAgICB0aGlzLndyYXAub24oJ21vdXNlZG93bicsIGV2ZW50ID0+IHtcclxuICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHJldHVybjtcclxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBpZiAodGhpcy5pc1NsaWRpbmcpIHJldHVybjtcclxuICAgICAgICAgIHRoaXMuZHJhZ1N0YXJ0ID0ge1xyXG4gICAgICAgICAgICB4OiBldmVudC5wYWdlWCxcclxuICAgICAgICAgICAgeTogZXZlbnQucGFnZVksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdGhpcy5vbk1vdmVTdGFydCgpO1xyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmVuZE1vdXNlTW92ZSk7XHJcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbk1vdmVTdGFydCgpIHtcclxuICAgICAgdGhpcy5pc0RyYWdnZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmxhc3REcmFnID0ge1xyXG4gICAgICAgIGxhc3RTYXZlSWQ6IDAsXHJcbiAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuZHJhZ1N0YXJ0LngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMuZHJhZ1N0YXJ0LnksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgb25EcmFnKGV2ZW50KSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB7XHJcbiAgICAgICAgeDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsXHJcbiAgICAgICAgeTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMub25Nb3ZlKGN1cnJlbnRQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VNb3ZlKGV2ZW50KSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB7XHJcbiAgICAgICAgeDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgeTogZXZlbnQucGFnZVksXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMub25Nb3ZlKGN1cnJlbnRQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW92ZShjdXJyZW50UG9zKSB7XHJcbiAgICAgIHRoaXMubGFzdERyYWcubGFzdFNhdmVJZCA9ICh0aGlzLmxhc3REcmFnLmxhc3RTYXZlSWQgKyAxKSAlIDEwO1xyXG4gICAgICB0aGlzLmxhc3REcmFnLnZhbHVlc1t0aGlzLmxhc3REcmFnLmxhc3RTYXZlSWRdID0gY3VycmVudFBvcztcclxuICAgICAgY29uc3QgYXhpcyA9IHRoaXMub3B0aW9ucy5pc1ZlcnRpY2FsID8gJ3knIDogJ3gnO1xyXG4gICAgICBjb25zdCBkaWZmID0gY3VycmVudFBvc1theGlzXSAtIHRoaXMuZHJhZ1N0YXJ0W2F4aXNdO1xyXG4gICAgICB0aGlzLnBvc2l0aW9uID1cclxuICAgICAgICB0aGlzLnNsaWRlc1t0aGlzLmN1cnJlbnRTbGlkZUlkXS5vZmZzZXQgLSBkaWZmIC0gdGhpcy5zbGlkZU9mZnNldCAvIDI7XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmlzVmVydGljYWwpIHtcclxuICAgICAgICB0aGlzLmJhci5jc3Moe1xyXG4gICAgICAgICAgdG9wOiAtdGhpcy5wb3NpdGlvbixcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmJhci5jc3Moe1xyXG4gICAgICAgICAgbGVmdDogLXRoaXMucG9zaXRpb24sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbmREcmFnKGV2ZW50KSB7XHJcbiAgICAgIGNvbnN0IGRyYWdFbmQgPSB7XHJcbiAgICAgICAgeDogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsXHJcbiAgICAgICAgeTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZW5kTW92ZShkcmFnRW5kKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5lbmREcmFnKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25EcmFnKTtcclxuICAgIH1cclxuXHJcbiAgICBlbmRNb3VzZU1vdmUoZXZlbnQpIHtcclxuICAgICAgY29uc3QgZHJhZ0VuZCA9IHtcclxuICAgICAgICB4OiBldmVudC5wYWdlWCxcclxuICAgICAgICB5OiBldmVudC5wYWdlWSxcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5lbmRNb3ZlKGRyYWdFbmQpO1xyXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuZW5kTW91c2VNb3ZlKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgfVxyXG5cclxuICAgIGVuZE1vdmUoZHJhZ0VuZCkge1xyXG4gICAgICBjb25zdCBwYXJ0TmVlZGVkVG9TbGlkZSA9IDEgLyAxMDA7XHJcbiAgICAgIHRoaXMuaXNEcmFnZ2VkID0gZmFsc2U7XHJcbiAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLm9wdGlvbnMuaXNWZXJ0aWNhbCA/ICd5JyA6ICd4JztcclxuXHJcbiAgICAgIGxldCBjdXJyZW50UG9zID0gdGhpcy5zbGlkZXNbdGhpcy5jdXJyZW50U2xpZGVJZF0ub2Zmc2V0O1xyXG4gICAgICBjdXJyZW50UG9zIC09IGRyYWdFbmRbYXhpc10gLSB0aGlzLmRyYWdTdGFydFtheGlzXTtcclxuXHJcbiAgICAgIGNvbnN0IGFwcGx5Rm91bmRTbGlkZSA9IGZvdW5kID0+IHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTbGlkZUlkID0gZm91bmQ7XHJcbiAgICAgICAgdGhpcy5zbGlkZU9mZnNldCA9IDA7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBwcmV2aW91cyBwb3NpdGlvblxyXG4gICAgICBpZiAoZHJhZ0VuZFtheGlzXSA+IHRoaXMuZHJhZ1N0YXJ0W2F4aXNdKSB7XHJcbiAgICAgICAgbGV0IGZvdW5kID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2xpZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBjb25zdCBzbGlkZUNlbnRlciA9IHRoaXMuc2xpZGVzW2ldLm9mZnNldCArIHRoaXMuc2xpZGVzW2ldLnNpemUgLyAyO1xyXG4gICAgICAgICAgY29uc3Qgd3JhcFN0YXJ0ID0gY3VycmVudFBvcyAtIHRoaXMuc2xpZGVPZmZzZXQgLyAyO1xyXG5cclxuICAgICAgICAgIGlmIChzbGlkZUNlbnRlciA+IHdyYXBTdGFydCkge1xyXG4gICAgICAgICAgICBmb3VuZCA9IGk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaXNTbGlkZWRFbm91Z2hUb0NoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHNsaWRlZEFtb3VudCA9IGRyYWdFbmRbYXhpc10gLSB0aGlzLmRyYWdTdGFydFtheGlzXTtcclxuICAgICAgICAgIGNvbnN0IGFtb3VudE5lZGVlZFRvU2xpZGUgPVxyXG4gICAgICAgICAgICB0aGlzLnNsaWRlc1t0aGlzLmN1cnJlbnRTbGlkZUlkXS5zaXplICogcGFydE5lZWRlZFRvU2xpZGU7XHJcbiAgICAgICAgICByZXR1cm4gc2xpZGVkQW1vdW50ID4gYW1vdW50TmVkZWVkVG9TbGlkZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVJZCA9PT0gZm91bmQpIHtcclxuICAgICAgICAgIGlmIChpc1NsaWRlZEVub3VnaFRvQ2hhbmdlKCkgJiYgZm91bmQgPiAwKSBhcHBseUZvdW5kU2xpZGUoZm91bmQgLSAxKTtcclxuICAgICAgICB9IGVsc2UgYXBwbHlGb3VuZFNsaWRlKGZvdW5kKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gbmV4dCBwb3NpdGlvblxyXG4gICAgICBlbHNlIGlmIChkcmFnRW5kW2F4aXNdIDwgdGhpcy5kcmFnU3RhcnRbYXhpc10pIHtcclxuICAgICAgICBsZXQgZm91bmQgPSB0aGlzLnNsaWRlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbGlkZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IHNsaWRlQ2VudGVyID0gdGhpcy5zbGlkZXNbaV0ub2Zmc2V0ICsgdGhpcy5zbGlkZXNbaV0uc2l6ZSAvIDI7XHJcbiAgICAgICAgICBjb25zdCB3cmFwRW5kID0gY3VycmVudFBvcyAtIHRoaXMuc2xpZGVPZmZzZXQgLyAyICsgdGhpcy5zaXplO1xyXG4gICAgICAgICAgaWYgKHNsaWRlQ2VudGVyID4gd3JhcEVuZCkge1xyXG4gICAgICAgICAgICBmb3VuZCA9IE1hdGgubWF4KGkgLSAxLCAwKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc1NsaWRlZEVub3VnaFRvQ2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc2xpZGVkQW1vdW50ID0gdGhpcy5kcmFnU3RhcnRbYXhpc10gLSBkcmFnRW5kW2F4aXNdO1xyXG4gICAgICAgICAgY29uc3QgYW1vdW50TmVkZWVkVG9TbGlkZSA9XHJcbiAgICAgICAgICAgIHRoaXMuc2xpZGVzW3RoaXMuY3VycmVudFNsaWRlSWRdLnNpemUgKiBwYXJ0TmVlZGVkVG9TbGlkZTtcclxuICAgICAgICAgIHJldHVybiBzbGlkZWRBbW91bnQgPiBhbW91bnROZWRlZWRUb1NsaWRlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRTbGlkZUlkID09PSBmb3VuZCkge1xyXG4gICAgICAgICAgaWYgKGlzU2xpZGVkRW5vdWdoVG9DaGFuZ2UoKSAmJiBmb3VuZCArIDEgPCB0aGlzLnNsaWRlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGFwcGx5Rm91bmRTbGlkZShmb3VuZCArIDEpO1xyXG4gICAgICAgIH0gZWxzZSBhcHBseUZvdW5kU2xpZGUoZm91bmQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmFwcGx5UG9zaXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja1NpemUoKSB7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuc2l6ZXIuaGVpZ2h0KCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5zaXplci53aWR0aCgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2xpZGVPZmZzZXQgPSAwO1xyXG4gICAgICB0aGlzLmJhclNpemUgPSAwO1xyXG4gICAgICB0aGlzLmd1dHRlciA9XHJcbiAgICAgICAgdGhpcy5zbGlkZXNbMF0uZWxlbWVudC5vdXRlcldpZHRoKHRydWUpIC1cclxuICAgICAgICB0aGlzLnNsaWRlc1swXS5lbGVtZW50Lm91dGVyV2lkdGgoKTtcclxuXHJcbiAgICAgIGNvbnN0IHNsaWRlck9mZnNldCA9IHRoaXMuaXNWZXJ0aWNhbFxyXG4gICAgICAgID8gdGhpcy5iYXIub2Zmc2V0KCkudG9wXHJcbiAgICAgICAgOiB0aGlzLmJhci5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgICB0aGlzLnNsaWRlcy5tYXAoc2xpZGUgPT4ge1xyXG4gICAgICAgIHRoaXMuYmFyU2l6ZSArPSBzbGlkZS5jaGVja1NpemUoc2xpZGVyT2Zmc2V0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuYXBwbHlQb3NpdGlvbigwKTtcclxuXHJcbiAgICAgIGlmICghdGhpcy5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5zbGlkZXMucmVkdWNlKFxyXG4gICAgICAgICAgKHByZXYsIGN1cnIpID0+IE1hdGgubWF4KHByZXYsIGN1cnIuZWxlbWVudFswXS5zY3JvbGxIZWlnaHQpLFxyXG4gICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hZGp1c3RIZWlnaHQpIHtcclxuICAgICAgICAgIHRoaXMud3JhcC5jc3Moe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuc2xpZGVzW3RoaXMuY3VycmVudFNsaWRlSWRdLmVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0LFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMud3JhcC5jc3Moe1xyXG4gICAgICAgICAgICBoZWlnaHQ6IG1heEhlaWdodCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByZXZTbGlkZSgpIHtcclxuICAgICAgaWYgKHRoaXMuY3VycmVudFNsaWRlSWQgPD0gMCkgcmV0dXJuO1xyXG4gICAgICBpZiAodGhpcy5pc1NsaWRpbmcpIHJldHVybjtcclxuICAgICAgdGhpcy5jdXJyZW50U2xpZGVJZC0tO1xyXG4gICAgICB0aGlzLnNsaWRlT2Zmc2V0ID0gMDtcclxuICAgICAgdGhpcy5hcHBseVBvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dFNsaWRlKCkge1xyXG4gICAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVJZCA+PSB0aGlzLnNsaWRlcy5sZW5ndGggLSAxKSByZXR1cm47XHJcbiAgICAgIGlmICh0aGlzLmlzU2xpZGluZykgcmV0dXJuO1xyXG4gICAgICB0aGlzLmN1cnJlbnRTbGlkZUlkKys7XHJcbiAgICAgIHRoaXMuc2xpZGVPZmZzZXQgPSAwO1xyXG4gICAgICB0aGlzLmFwcGx5UG9zaXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBseVBvc2l0aW9uKGR1cmF0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGFkanVzdFBvc2l0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9vcCkge1xyXG4gICAgICAgICAgY29uc3QgdHJ1ZUxlbmd0aCA9IHRoaXMuc2xpZGVzLmxlbmd0aCAvIDM7XHJcbiAgICAgICAgICBsZXQgaXNBZGp1c3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY3VycmVudFNsaWRlSWQgPCB0cnVlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNsaWRlSWQgKz0gdHJ1ZUxlbmd0aDtcclxuICAgICAgICAgICAgaXNBZGp1c3RlZCA9IHRydWU7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFNsaWRlSWQgPj0gMiAqIHRydWVMZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2xpZGVJZCAtPSB0cnVlTGVuZ3RoO1xyXG4gICAgICAgICAgICBpc0FkanVzdGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpc0FkanVzdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JhcC5hZGRDbGFzcygnYWRqdXN0aW5nJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlQb3NpdGlvbigwKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy53cmFwLnJlbW92ZUNsYXNzKCdhZGp1c3RpbmcnKTtcclxuICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuaXNTbGlkaW5nID0gdHJ1ZTtcclxuICAgICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBkdXJhdGlvbiA9IHRoaXMub3B0aW9ucy5kdXJhdGlvbjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNsaWRlT2Zmc2V0ID0gdGhpcy5zaXplIC0gdGhpcy5zbGlkZXNbdGhpcy5jdXJyZW50U2xpZGVJZF0uc2l6ZTtcclxuICAgICAgdGhpcy5wb3NpdGlvbiA9XHJcbiAgICAgICAgdGhpcy5zbGlkZXNbdGhpcy5jdXJyZW50U2xpZGVJZF0ub2Zmc2V0IC0gdGhpcy5zbGlkZU9mZnNldCAvIDI7XHJcblxyXG4gICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgaW5kZXgpID0+IHtcclxuICAgICAgICBpZiAoaW5kZXggPCB0aGlzLmN1cnJlbnRTbGlkZUlkKSBzbGlkZS5tYXJrQXNQcmV2KCk7XHJcbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPiB0aGlzLmN1cnJlbnRTbGlkZUlkKSBzbGlkZS5tYXJrQXNOZXh0KCk7XHJcbiAgICAgICAgZWxzZSBzbGlkZS5hY3RpdmF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5oYW5kbGVBcnJvd3MoKTtcclxuXHJcbiAgICAgIGxldCBjc3M7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0aW9uVHlwZSA9PT0gJ2ZhZGUnKSB7XHJcbiAgICAgICAgY3NzID0ge1xyXG4gICAgICAgICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbiAvIDIgLyAxMDAwfXNgLFxyXG4gICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNzcyA9IHtcclxuICAgICAgICAgIHRyYW5zaXRpb246IGAke2R1cmF0aW9uIC8gMTAwMH1zYCxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmJhci5jc3MoY3NzKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGNzcy50b3AgPSAtdGhpcy5wb3NpdGlvbjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjc3MubGVmdCA9IC10aGlzLnBvc2l0aW9uO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvblR5cGUgPT09ICdmYWRlJykge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5iYXIuY3NzKGNzcyk7XHJcbiAgICAgICAgICB0aGlzLmJhci5jc3Moe1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICB0aGlzLmlzU2xpZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIC8vIGFkanVzdCB0aGUgcG9zaXRpb24gaWYgc2xpZGVyIG5lZWRzIHRvIGxvb3BcclxuICAgICAgICAgIGFkanVzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgfSwgZHVyYXRpb24gLyAyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmJhci5jc3MoY3NzKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuYmFyLmNzcyh7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdub25lJyxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5pc1NsaWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAvLyBhZGp1c3QgdGhlIHBvc2l0aW9uIGlmIHNsaWRlciBuZWVkcyB0byBsb29wXHJcbiAgICAgICAgICBhZGp1c3RQb3NpdGlvbigpO1xyXG4gICAgICAgIH0sIGR1cmF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFkanVzdEhlaWdodCkge1xyXG4gICAgICAgICAgdGhpcy53cmFwLmNzcyh7XHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5zbGlkZXNbdGhpcy5jdXJyZW50U2xpZGVJZF0uZWxlbWVudFswXS5zY3JvbGxIZWlnaHQsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIGR1cmF0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVBcnJvd3MoKSB7XHJcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTbGlkZUlkID09PSB0aGlzLnNsaWRlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBcnJvd05leHRBY3RpdmUpIHtcclxuICAgICAgICAgIHRoaXMuYXJyb3dOZXh0LmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgdGhpcy5pc0Fycm93TmV4dEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICghdGhpcy5pc0Fycm93TmV4dEFjdGl2ZSkge1xyXG4gICAgICAgIHRoaXMuYXJyb3dOZXh0LnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgIHRoaXMuaXNBcnJvd05leHRBY3RpdmUgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVJZCA9PT0gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXJyb3dQcmV2QWN0aXZlKSB7XHJcbiAgICAgICAgICB0aGlzLmFycm93UHJldi5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgIHRoaXMuaXNBcnJvd1ByZXZBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNBcnJvd1ByZXZBY3RpdmUpIHtcclxuICAgICAgICB0aGlzLmFycm93UHJldi5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICB0aGlzLmlzQXJyb3dQcmV2QWN0aXZlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBTbGlkZXIubGFzdElkID0gLTE7XHJcblxyXG4gIGNsYXNzIFNsaWRlIHtcclxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHNsaWRlcikge1xyXG4gICAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgICBpZiAodGhpcy5lbGVtZW50Lmxlbmd0aCAhPT0gMSkgcmV0dXJuO1xyXG5cclxuICAgICAgdGhpcy5jb250ZW50ID0gJCgnPGRpdiBjbGFzcz1cInNpbmdsZS1zbGlkZS1jb250ZW50XCI+JylcclxuICAgICAgICAuYXBwZW5kKHRoaXMuZWxlbWVudC5jaGlsZHJlbigpKVxyXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpO1xyXG5cclxuICAgICAgdGhpcy5zbGlkZXIgPSBzbGlkZXI7XHJcbiAgICAgIHRoaXMud2VpZ2h0ID0gdGhpcy5lbGVtZW50LmRhdGEoJ3dlaWdodCcpO1xyXG4gICAgICBpZiAodGhpcy53ZWlnaHQgPT09IHVuZGVmaW5lZCkgdGhpcy53ZWlnaHQgPSAxO1xyXG4gICAgICB0aGlzLmlkID0gdGhpcy5zbGlkZXIuc2xpZGVzLmxlbmd0aDtcclxuICAgICAgdGhpcy5yZWFsSWQgPSB0aGlzLmlkO1xyXG4gICAgICB0aGlzLmRpcmVjdGlvblRvQWN0aXZlID0gdW5kZWZpbmVkO1xyXG4gICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICB0aGlzLm9mZnNldCA9IDA7XHJcblxyXG4gICAgICBpZiAodGhpcy5zbGlkZXIub3B0aW9ucy5zbGlkZXNBc0xpbmtzKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvblRvQWN0aXZlID09PSAwKSByZXR1cm47XHJcbiAgICAgICAgICBpZiAodGhpcy5zbGlkZXIuaXNTbGlkaW5nKSByZXR1cm47XHJcbiAgICAgICAgICB0aGlzLmdvVG8oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJ1bGxldCgpIHtcclxuICAgICAgaWYgKHRoaXMuc2xpZGVyLmJ1bGxldENvbnRhaW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNsaWRlci5vcHRpb25zLmxvb3ApIHtcclxuICAgICAgICAgIGlmICh0aGlzLmlkID49ICgyICogdGhpcy5zbGlkZXIuc2xpZGVzLmxlbmd0aCkgLyAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVhbElkIC09ICh0aGlzLnNsaWRlci5zbGlkZXMubGVuZ3RoIC8gMykgKiAyO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlkID49IHRoaXMuc2xpZGVyLnNsaWRlcy5sZW5ndGggLyAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVhbElkIC09IHRoaXMuc2xpZGVyLnNsaWRlcy5sZW5ndGggLyAzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhdGhpcy5zbGlkZXIub3B0aW9ucy5sb29wIHx8XHJcbiAgICAgICAgICAodGhpcy5pZCA+PSB0aGlzLnNsaWRlci5zbGlkZXMubGVuZ3RoIC8gMyAmJlxyXG4gICAgICAgICAgICB0aGlzLmlkIDwgKDIgKiB0aGlzLnNsaWRlci5zbGlkZXMubGVuZ3RoKSAvIDMpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLmJ1bGxldCA9IG5ldyBCdWxsZXQodGhpcy5zbGlkZXIsIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmJ1bGxldExpbmsgPSB7XHJcbiAgICAgICAgICAgIGlzTGluazogdHJ1ZSxcclxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLnNsaWRlci5zbGlkZXNbXHJcbiAgICAgICAgICAgICAgdGhpcy5yZWFsSWQgKyB0aGlzLnNsaWRlci5zbGlkZXMubGVuZ3RoIC8gM1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja1NpemUoc2xpZGVyT2Zmc2V0KSB7XHJcbiAgICAgIGlmICh0aGlzLnNsaWRlci5pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0KCkudG9wIC0gc2xpZGVyT2Zmc2V0O1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuY29udGVudC5vdXRlckhlaWdodCh0cnVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMuZWxlbWVudC5vZmZzZXQoKS5sZWZ0IC0gc2xpZGVyT2Zmc2V0O1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuY29udGVudC5vdXRlcldpZHRoKHRydWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIGdvVG8oKSB7XHJcbiAgICAgIHRoaXMuc2xpZGVyLmN1cnJlbnRTbGlkZUlkID0gdGhpcy5pZDtcclxuICAgICAgdGhpcy5zbGlkZXIuYXBwbHlQb3NpdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlKCkge1xyXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb25Ub0FjdGl2ZSAhPT0gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmJ1bGxldCAhPT0gdW5kZWZpbmVkKSB0aGlzLmJ1bGxldC5lbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICBlbHNlIGlmICh0aGlzLmJ1bGxldExpbmsgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgdGhpcy5idWxsZXRMaW5rLnRhcmdldC5idWxsZXQuZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ3NsaWRlLXByZXYgc2xpZGUtbmV4dCcpO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uVG9BY3RpdmUgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLnNsaWRlci5vcHRpb25zLm9uQWN0aXZhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgdGhpcy5zbGlkZXIub3B0aW9ucy5vbkFjdGl2YXRlLmNhbGwodGhpcywgdGhpcywgdGhpcy5zbGlkZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlYWN0aXZhdGUoKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLmRpcmVjdGlvblRvQWN0aXZlID09PSAwIHx8XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25Ub0FjdGl2ZSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICkge1xyXG4gICAgICAgIHRoaXMuYnVsbGV0ICYmIHRoaXMuYnVsbGV0LmVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2xpZGVyLm9wdGlvbnMub25EZWFjdGl2YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuc2xpZGVyLm9wdGlvbnMub25EZWFjdGl2YXRlLmNhbGwodGhpcywgdGhpcywgdGhpcy5zbGlkZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1hcmtBc1ByZXYoKSB7XHJcbiAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xyXG4gICAgICBpZiAodGhpcy5kaXJlY3Rpb25Ub0FjdGl2ZSA+PSAwIHx8IHRoaXMuZGlyZWN0aW9uVG9BY3RpdmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcygnc2xpZGUtbmV4dCcpLmFkZENsYXNzKCdzbGlkZS1wcmV2Jyk7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25Ub0FjdGl2ZSA9IC0xO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWFya0FzTmV4dCgpIHtcclxuICAgICAgdGhpcy5kZWFjdGl2YXRlKCk7XHJcbiAgICAgIGlmICh0aGlzLmRpcmVjdGlvblRvQWN0aXZlIDw9IDAgfHwgdGhpcy5kaXJlY3Rpb25Ub0FjdGl2ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKCdzbGlkZS1wcmV2JykuYWRkQ2xhc3MoJ3NsaWRlLW5leHQnKTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvblRvQWN0aXZlID0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xhc3MgQnVsbGV0IHtcclxuICAgIGNvbnN0cnVjdG9yKHNsaWRlciwgc2xpZGUsIGR1bW15KSB7XHJcbiAgICAgIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xyXG4gICAgICB0aGlzLnNsaWRlID0gc2xpZGU7XHJcbiAgICAgIGlmICh0aGlzLnNsaWRlci5vcHRpb25zLmJ1bGxldFNlbGVjdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxyXG4gICAgICAgICAgLmFkZENsYXNzKCdmMy1zbGlkZXItYnVsbGV0JylcclxuICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLnNsaWRlci5idWxsZXRDb250YWluZXIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuc2xpZGVyLmJ1bGxldENvbnRhaW5lclxyXG4gICAgICAgICAgLmZpbmQodGhpcy5zbGlkZXIub3B0aW9ucy5idWxsZXRTZWxlY3RvcilcclxuICAgICAgICAgIC5lcSh0aGlzLnNsaWRlLnJlYWxJZCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuc2xpZGUuZ29Uby5iaW5kKHRoaXMuc2xpZGUpKTtcclxuICAgICAgY3JlYXRlSG92ZXJhYmxlKHRoaXMuZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgU2xpZGVyKG9wdGlvbnMpO1xyXG4gIH07XHJcbn0pKCk7XHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIG1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2xpZGVyO1xyXG4iLCJmdW5jdGlvbiB0aHJvdHRsZShtcywgY2FsbGJhY2spIHtcclxuICBsZXQgbGFzdENhbGwgPSAwO1xyXG4gIGxldCB0aW1lb3V0O1xyXG4gIHJldHVybiBhID0+IHtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgaWYgKG5vdyAtIGxhc3RDYWxsID49IG1zKSB7XHJcbiAgICAgIGxhc3RDYWxsID0gbm93O1xyXG4gICAgICBjYWxsYmFjayhhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKGEgPT4gY2FsbGJhY2suYmluZCh0aGlzLCBhKSkoYSksIG1zKTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIG1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XHJcbiIsImNvbnN0ICQgPSByZXF1aXJlKCdjYXNoLWRvbScpO1xyXG5jb25zdCB0aHJvdHRsZSA9IHJlcXVpcmUoJy4vd2lkb2stdGhyb3R0bGUnKTtcclxuXHJcbmNvbnN0IHdpZG9rID0ge1xyXG4gIGg6IDAsXHJcbiAgdzogMCxcclxuICBzOiAwLFxyXG4gIHNpemVDaGVjazogKCkgPT4ge1xyXG4gICAgd2lkb2suaCA9ICQod2luZG93KS5oZWlnaHQoKTtcclxuICAgIHdpZG9rLncgPSAkKHdpbmRvdykud2lkdGgoKTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnbGF5b3V0Q2hhbmdlJykpO1xyXG4gICAgd2lkb2suc2Nyb2xsQ2hlY2soKTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYWZ0ZXJMYXlvdXRDaGFuZ2UnKSk7XHJcbiAgfSxcclxuICBzY3JvbGxDaGVjazogKCkgPT4ge1xyXG4gICAgd2lkb2sucyA9IHdpbmRvdy5zY3JvbGxZO1xyXG4gIH0sXHJcbn07XHJcblxyXG4kKHdpbmRvdykub24oe1xyXG4gIHJlc2l6ZTogdGhyb3R0bGUoMTAwLCB3aWRvay5zaXplQ2hlY2spLFxyXG4gIGxvYWQ6IHdpZG9rLnNpemVDaGVjayxcclxuICBzY3JvbGw6IHdpZG9rLnNjcm9sbENoZWNrLFxyXG59KTtcclxuXHJcbiQoZG9jdW1lbnQpLm9uKCdyZWFkeScsIHdpZG9rLnNpemVDaGVjayk7XHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIG1vZHVsZS5leHBvcnRzID0gd2lkb2s7XHJcbiJdfQ=="}